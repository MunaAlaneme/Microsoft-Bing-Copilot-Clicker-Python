%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1311.i013.028.S.m002.c10.game monsters.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Алексей Егоров
%%CreationDate: 11/28/2013
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.1 x260 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">MONSTER-WORK</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2013-11-28T13:00:52+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-11-28T13:00:52+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-11-28T13:00:52+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A46BkWTYGKrgMVbAxVcBi&#xA;rdMVbpirdMVbpirdMVdTFW6Yq6mKt0xV1MVdTFXUxV1MVdTFWqYq6mKtUxV1MVapirVMVapirVMV&#xA;aIxVojFVpGKtEYqtIxVsDFVwGKrgMVbAxVdTFW6Yq3TFW6Yq6mKt0xVumKuxVvFXUxV1MVdTFXUx&#xA;V1MVdTFXUxV2KtUxVqmKupirVMVapirVMVapirRGKrSMVWkYq0RirYGKrgMVXAYqqQxNLIsa9WNM&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:46C15CCB0A58E311A12FE890FF875245</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:46C15CCB0A58E311A12FE890FF875245</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:724B6CB74C57E311AC18C283B64DA053</stRef:instanceID>
            <stRef:documentID>xmp.did:724B6CB74C57E311AC18C283B64DA053</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:12C94380E052E311AC04B081D5EDF3BA</stEvt:instanceID>
                  <stEvt:when>2013-11-21T23:09:52+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3C2753889056E311B3B9DF37CABABFBA</stEvt:instanceID>
                  <stEvt:when>2013-11-26T15:50:32+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:724B6CB74C57E311AC18C283B64DA053</stEvt:instanceID>
                  <stEvt:when>2013-11-27T14:14:35+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:46C15CCB0A58E311A12FE890FF875245</stEvt:instanceID>
                  <stEvt:when>2013-11-28T13:00:52+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
level3{
gsave
clp
[476.597 0 0 476.597 225 225 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.672084 .602045 .59057 .448646 ]
/C1 [.75021 .679683 .670222 .90164 ]
/N 2.50245 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[476.597 0 0 476.597 225 225 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%
XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8P+Xf\_-Xf\_-Xf\_-Xf\_-Xf\b/Y-+q1Y-+q1Y-+q1
Y-+t3YHP.5YHP.5YHP.6Yct@9Yct@9Yct@:Z*CR=Z*CR=Z*L[@ZEgdAZEgdBZa7!EZa7!E['[3I['[3I
[C*EM[C*EM[^NWQ[^NWR\$riU\$rlW\@B&Y\[f8]\[f8^]"5Ja]">Sd]=Y\f]Y(ni]tM+m]tM.o^:q=r
~>
<~R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0M4R[T\6
R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\7S"#n:S"#n:S"#n:S"#n:S"#n:S=H+>S=H+>S=H+>S=H+>
SXl=BSXl=BSXl=BSXl@DSt;OFSt;OFSt;RHT:_aJT:_aJTV.sNTV.sNTV/!PTqS0RTqS0SU8"BVU8"BW
USFTZUSFT[Unjf^Unji`V5:#bV5C,eVP^5fVl-GjVl-JlW2QYnW2ZbqWMuntWiE)!X/i;%X/i>'XK8M*
~>
<~QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBml(Q^=&*Q^=&*
Q^=&*Q^=&*Q^=&*Q^=&*Q^=&*Q^=&*Q^F/-R$a8.R$a8.R$a8.R$a8.R$a;0R@0J2R@0J2R@0J2R@0M4
R[T\6R[T\6R[T\7S"#n:S"#n:S"#n;S=H+>S=H+>S=H.@SXl=BSXl=BSt;OFSt;OFT:_aJT:_aJT:hjM
TV.sNTqS0RTqS0RU8"BVU8"BWUSFTZUSO]]Unjf^V5:#bV5:&dVP^5fVl-GjVl6PmW2QYoWMukrWiE)!
~>
<~EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@F)uDDF)uDDF)uDDF)uDEFEDVHFEDVHFEM_KF`hhL
G'8%PG'8%QGB\7TGBe@WG^+LZH$O[]H?smaH[C*eI!g<iI=6NmIXZcrIt3'"J:W9&JqAW-K7no2KnY89
L51P?LkpnEMMd=MMi<USNK0$[O-#HcOcklkPE_;sQBml(R$a;1R[]e:SXl@DT:hjNU8"EYUnsrdVl6So
WiN5&Xfek2Yd(L?Za@-K\$rlX]">Vg]tV7s_8=+.`Q#p<aN;TJbg"GZd*^:jeCE.%f\,!6h;7&IiSrnY
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
135.07 276.258 mo
135.07 280.545 115.428 284.02 91.1973 284.02 cv
66.9668 284.02 47.3242 280.545 47.3242 276.258 cv
47.3242 271.971 66.9668 268.496 91.1973 268.496 cv
115.428 268.496 135.07 271.971 135.07 276.258 cv
cp
.705837 .634333 .609003 .769009 cmyk
f
266.07 411.758 mo
266.07 416.045 246.428 419.52 222.197 419.52 cv
197.967 419.52 178.324 416.045 178.324 411.758 cv
178.324 407.471 197.967 403.996 222.197 403.996 cv
246.428 403.996 266.07 407.471 266.07 411.758 cv
cp
f
279.104 275.252 mo
279.104 279.538 259.462 283.014 235.231 283.014 cv
211.001 283.014 191.359 279.538 191.359 275.252 cv
191.359 270.965 211.001 267.489 235.231 267.489 cv
259.462 267.489 279.104 270.965 279.104 275.252 cv
cp
f
135.57 408.758 mo
135.57 413.044 115.928 416.52 91.6973 416.52 cv
67.4668 416.52 47.8242 413.044 47.8242 408.758 cv
47.8242 404.471 67.4668 400.996 91.6973 400.996 cv
115.928 400.996 135.57 404.471 135.57 408.758 cv
cp
f
137.07 138.856 mo
137.07 143.144 117.428 146.618 93.1973 146.618 cv
68.9673 146.618 49.3247 143.144 49.3247 138.856 cv
49.3247 134.569 68.9673 131.094 93.1973 131.094 cv
117.428 131.094 137.07 134.569 137.07 138.856 cv
cp
f
404.111 273.993 mo
404.111 278.28 384.469 281.755 360.238 281.755 cv
336.008 281.755 316.365 278.28 316.365 273.993 cv
316.365 269.706 336.008 266.23 360.238 266.23 cv
384.469 266.23 404.111 269.706 404.111 273.993 cv
cp
f
401.87 408.758 mo
401.87 413.045 382.228 416.52 357.998 416.52 cv
333.768 416.52 314.125 413.045 314.125 408.758 cv
314.125 404.471 333.768 400.996 357.998 400.996 cv
382.228 400.996 401.87 404.471 401.87 408.758 cv
cp
f
406.756 359.214 mo
405.631 358.998 404.544 358.66 403.475 358.21 cv
401.852 357.469 397.164 354.91 394.934 353.906 cv
394.727 352.707 394.529 351.506 394.324 350.307 cv
394.183 349.48 394.023 348.656 393.855 347.822 cv
394.848 347.652 395.749 347.587 396.152 347.615 cv
400.381 347.897 406.119 349.144 409.429 352.443 cv
413.142 356.147 410.976 360.151 406.756 359.214 cv
cp
.674952 0 1 0 cmyk
f
321.15 347.063 mo
321.084 347.334 321.019 347.605 320.953 347.868 cv
320.644 349.275 320.362 350.682 320.1 352.088 cv
320.091 352.088 320.091 352.088 320.091 352.088 cv
318.713 352.481 312.768 355.641 310.912 356.447 cv
309.871 356.879 308.81 357.197 307.705 357.395 cv
303.551 358.285 301.197 354.619 304.704 351.188 cv
307.836 348.121 313.471 346.94 317.662 346.649 cv
318.215 346.611 319.763 346.725 321.15 347.063 cv
cp
f
406.756 359.214 mo
405.631 358.998 404.544 358.66 403.475 358.21 cv
401.852 357.469 397.164 354.91 394.934 353.906 cv
394.727 352.707 394.529 351.506 394.324 350.307 cv
394.183 349.48 394.023 348.656 393.855 347.822 cv
394.848 347.652 395.749 347.587 396.152 347.615 cv
400.381 347.897 406.119 349.144 409.429 352.443 cv
413.142 356.147 410.976 360.151 406.756 359.214 cv
cp
377.539 357.264 mo
374.164 358.791 369.776 357.31 368.389 353.99 cv
367.422 351.666 367.629 348.44 370.573 346.368 cv
375.935 343.442 379.527 346.527 380.812 348.111 cv
383.4 351.301 380.803 355.781 377.539 357.264 cv
cp
343.879 356.72 mo
340.494 358.248 336.105 356.766 334.718 353.447 cv
333.752 351.112 333.958 347.887 336.902 345.824 cv
342.266 342.898 345.857 345.983 347.142 347.568 cv
349.729 350.746 347.133 355.238 343.879 356.72 cv
cp
320.953 347.868 mo
320.644 349.275 320.362 350.682 320.1 352.088 cv
320.091 352.088 320.091 352.088 320.091 352.088 cv
318.713 352.481 312.768 355.641 310.912 356.447 cv
309.871 356.879 308.81 357.197 307.705 357.395 cv
303.551 358.285 301.197 354.619 304.704 351.188 cv
307.836 348.121 313.471 346.94 317.662 346.649 cv
318.215 346.611 319.763 346.725 321.15 347.063 cv
321.084 347.334 321.019 347.605 320.953 347.868 cv
cp
415.795 355.275 mo
415.018 351.487 412.514 349.041 409.569 346.921 cv
405.865 344.258 398.318 342.092 392.654 342.73 cv
390.657 335.473 387.469 328.544 382.416 324.033 cv
379.105 321.08 373.611 318.389 369.447 316.945 cv
365.013 315.417 358.703 313.973 346.673 316.945 cv
342.162 318.06 338.262 320.817 334.896 323.996 cv
329.636 328.956 325.201 335.482 322.603 342.412 cv
316.818 341.174 308.211 343.377 304.301 346.105 cv
301.469 348.074 299.106 350.344 298.525 353.842 cv
298.084 356.447 299.688 359.861 302.172 360.948 cv
305.268 362.308 308.221 361.839 311.371 360.92 cv
313.283 360.357 317.456 358.285 319.228 357.404 cv
318.281 364.117 317.859 370.887 317.925 377.666 cv
317.943 380.189 318.563 386.171 320.41 386.357 cv
322.951 386.611 324.92 383.555 326.664 381.745 cv
328.127 380.217 329.299 378.258 330.414 376.953 cv
331.239 378.848 336.649 389.415 339.152 389.621 cv
342.21 389.874 349.617 379.926 349.72 379.814 cv
349.72 379.814 356.949 390.391 359.753 390.391 cv
362.687 390.391 367.133 381.727 368.135 379.579 cv
368.182 379.617 368.238 379.673 368.285 379.711 cv
369.401 380.751 375.402 389.293 377.943 389.19 cv
380.193 389.096 383.925 380.16 385.031 378.295 cv
387.028 380.957 391.67 387.699 395.383 387.549 cv
396.31 387.522 397.52 384.38 397.614 381.164 cv
397.773 375.351 397.398 371.309 396.817 366.621 cv
396.527 364.305 396.189 361.979 395.842 359.664 cv
397.905 360.714 401.506 362.533 403.25 363.067 cv
406.475 364.043 409.467 364.53 412.504 363.029 cv
414.951 361.83 416.377 358.107 415.795 355.275 cv
cp
.796841 .186221 1 .056275 cmyk
f
393.551 382.178 mo
391.941 381.692 387.654 376.217 386.334 374.805 cv
383.951 372.257 383.82 372.853 383.076 374.006 cv
382.122 375.483 378.088 384.793 377.653 384.865 cv
377.062 384.965 368.137 373.715 367.156 374.587 cv
365.468 376.088 360.662 385.674 359.748 385.81 cv
358.767 385.955 350.965 375.35 349.505 375.35 cv
348.523 375.35 340.063 384.633 339.518 384.939 cv
338.73 384.654 333.596 375.664 332.336 373.48 cv
331.527 372.08 330.982 371.1 328.912 373.389 cv
327.043 375.453 325.861 376.875 321.742 381.002 cv
321.103 381.642 321.334 372.371 321.34 370.281 cv
321.353 366.172 321.721 354.103 325.207 345.148 cv
327.965 338.072 332.351 330.838 337.978 325.756 cv
343.681 320.607 349.941 318.473 358.658 318.908 cv
372.496 319.563 376.636 323.484 379.359 325.773 cv
386.357 331.65 388.408 339.236 390.146 347.347 cv
392.011 356.043 392.941 364.561 393.835 373.406 cv
393.891 373.949 394.167 382.363 393.551 382.178 cv
cp
.674952 0 1 0 cmyk
f
377.544 357.262 mo
374.162 358.797 369.777 357.315 368.391 353.994 cv
367.42 351.662 367.629 348.436 370.57 346.366 cv
375.935 343.446 379.527 346.527 380.812 348.109 cv
383.396 351.295 380.804 355.785 377.544 357.262 cv
cp
383.789 347.631 mo
381.745 343.542 377.544 341.463 372.471 342.478 cv
369.372 343.206 364.578 345.713 365.049 352.908 cv
365.423 358.588 372.179 362.266 377.505 360.631 cv
382.996 358.94 386.482 353.022 383.789 347.631 cv
cp
.796841 .186221 1 .056275 cmyk
f
377.622 357.262 mo
374.24 358.797 369.855 357.315 368.47 353.994 cv
367.498 351.662 367.707 348.436 370.648 346.366 cv
376.014 343.446 379.605 346.527 380.891 348.109 cv
383.476 351.295 380.883 355.785 377.622 357.262 cv
cp
0 0 0 0 cmyk
f
343.875 356.717 mo
340.493 358.252 336.109 356.77 334.723 353.449 cv
333.751 351.117 333.959 347.892 336.902 345.821 cv
342.268 342.901 345.858 345.982 347.144 347.565 cv
349.728 350.751 347.135 355.24 343.875 356.717 cv
cp
350.121 347.086 mo
348.076 342.998 343.875 340.918 338.803 341.934 cv
335.703 342.662 330.909 345.168 331.38 352.363 cv
331.755 358.042 338.51 361.721 343.836 360.086 cv
349.328 358.396 352.814 352.477 350.121 347.086 cv
cp
.796841 .186221 1 .056275 cmyk
f
343.891 356.717 mo
340.509 358.252 336.124 356.77 334.738 353.449 cv
333.766 351.117 333.976 347.892 336.918 345.821 cv
342.283 342.901 345.874 345.982 347.16 347.565 cv
349.744 350.751 347.15 355.24 343.891 356.717 cv
cp
0 0 0 0 cmyk
f
343.33 346.802 mo
340.921 345.387 336.76 347.293 336.506 350.408 cv
336.354 352.275 337.629 354.084 339.307 354.588 cv
340.991 355.455 343.205 355.09 344.625 353.603 cv
345.564 352.619 347.211 349.082 343.33 346.802 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
376.891 347.238 mo
374.48 345.822 370.318 347.728 370.065 350.845 cv
369.914 352.711 371.187 354.521 372.865 355.024 cv
374.551 355.891 376.764 355.525 378.184 354.039 cv
379.125 353.055 380.77 349.518 376.891 347.238 cv
cp
f
364.534 362.963 mo
364.272 364.668 360.324 362.846 359.513 362.68 cv
358.389 362.453 357.281 362.648 356.175 362.867 cv
354.867 363.125 352.818 363.904 352.091 362.566 cv
351.951 362.318 351.738 361.211 353.202 359.93 cv
354.383 359.136 356.162 358.574 357.687 358.553 cv
360.703 358.518 364.939 360.313 364.534 362.963 cv
cp
361.557 357.045 mo
358.393 355.946 354.771 356.029 351.062 358.875 cv
349.144 360.853 349.306 362.278 349.318 362.632 cv
349.41 364.523 351.668 365.316 353.236 365.557 cv
354.234 365.709 355.154 365.609 356.141 365.426 cv
357.835 365.111 359.107 365.068 360.777 365.578 cv
362.429 366.084 365.127 366.385 366.212 364.785 cv
368.758 361.023 364.539 358.078 361.557 357.045 cv
cp
.796841 .186221 1 .056275 cmyk
f
364.534 362.963 mo
364.272 364.668 360.324 362.846 359.513 362.68 cv
358.389 362.453 357.281 362.648 356.175 362.867 cv
354.867 363.125 352.818 363.904 352.091 362.566 cv
351.951 362.318 351.738 361.211 353.202 359.93 cv
354.383 359.136 356.162 358.574 357.687 358.553 cv
360.703 358.518 364.939 360.313 364.534 362.963 cv
cp
.814176 .346471 1 .267765 cmyk
f
384.193 333.475 mo
382.734 331.551 381.676 329.49 379.945 327.772 cv
377.248 325.09 373.014 321.215 368.816 322.109 cv
366.01 322.707 364.857 325.843 367.1 327.89 cv
368.32 329.005 369.863 329.601 371.175 330.588 cv
372.727 331.754 374.178 333.287 375.331 334.843 cv
376.532 336.463 377.502 338.275 378.602 339.959 cv
380.041 342.162 383.143 342.67 384.852 340.547 cv
386.363 338.67 385.543 335.256 384.193 333.475 cv
cp
0 0 0 0 cmyk
f
326.835 368.676 mo
326.646 367.381 325.646 364.307 323.672 365.21 cv
321.955 365.996 321.656 367.951 321.56 369.643 cv
321.5 370.686 321.611 371.484 321.93 372.472 cv
322.285 373.575 323.881 374.506 325.002 373.95 cv
327.02 372.951 327.125 370.678 326.835 368.676 cv
cp
f
246.719 368.989 mo
247.463 370.137 248.192 371.299 248.955 372.438 cv
250.651 374.967 252.502 377.389 254.328 379.819 cv
255.769 381.739 256.694 383.826 256.099 386.295 cv
255.564 388.522 254.138 390.533 252.227 391.668 cv
247.709 394.354 243.117 390.897 239.816 387.744 cv
237.925 385.941 236.483 383.853 235.182 381.559 cv
234.819 380.921 234.438 380.232 234.085 379.518 cv
233.485 382.603 232.811 386.174 231.301 388.902 cv
229.608 391.951 226.536 394.248 222.204 393.457 cv
218.132 392.714 215.092 389.06 213.786 385.142 cv
213.47 384.189 213.177 383.096 212.954 381.943 cv
211.666 384.04 210.23 385.96 208.39 387.629 cv
204.917 390.779 200.093 394.238 195.342 391.552 cv
193.334 390.418 191.842 388.404 191.274 386.178 cv
190.646 383.71 191.623 381.623 193.139 379.703 cv
195.059 377.272 197.001 374.851 198.786 372.322 cv
199.585 371.183 200.352 370.022 201.138 368.873 cv
195.598 368.356 190.897 364.373 189.071 358.869 cv
186.663 351.609 189.843 344.563 193.26 338.24 cv
196.796 331.695 201.021 325.36 206.781 320.545 cv
209.653 318.147 213.037 315.39 216.426 313.717 cv
222.627 310.652 226.327 310.885 231.649 313.6 cv
234.87 315.246 238.613 318.262 241.346 320.66 cv
246.826 325.477 250.847 331.813 254.212 338.357 cv
257.461 344.678 260.487 351.725 258.195 358.986 cv
256.457 364.489 251.985 368.473 246.719 368.989 cv
cp
.157534 .446876 1 .009613 cmyk
f
243.332 364.748 mo
241.294 364.731 240.66 365.652 241.204 367.213 cv
242.674 371.434 245.277 375.313 247.898 378.832 cv
249.433 380.893 254.329 385.701 249.887 387.636 cv
246.786 388.986 242.611 384.499 240.793 382.273 cv
239.52 380.715 236.646 376.7 235.053 373.336 cv
234.398 371.954 231.533 371.006 231.084 374.404 cv
230.534 378.566 229.649 389.89 223.05 389.25 cv
219.448 388.902 217.007 385.532 216.399 374.322 cv
216.31 371.82 214.226 371.889 213.395 373.22 cv
211.081 376.933 208.699 380.598 207.362 382.156 cv
205.451 384.383 201.064 388.869 197.805 387.52 cv
193.137 385.586 198.282 380.775 199.894 378.715 cv
202.649 375.195 205.386 371.317 206.931 367.098 cv
207.502 365.536 206.897 364.498 204.694 364.632 cv
196.438 365.195 193.649 360.199 192.893 356.665 cv
191.482 350.076 195.07 343.712 197.861 338.631 cv
203.434 328.484 215.147 316.506 224.133 316.418 cv
232.579 316.506 244.422 328.392 249.833 338.748 cv
252.488 343.828 255.82 351.483 254.56 356.781 cv
253.948 359.353 251.869 365.66 243.332 364.748 cv
cp
.001312 .213321 1 0 cmyk
f
242.183 358.074 mo
239.552 361.013 234.248 361.784 230.892 358.795 cv
227.81 356.048 227.019 348.611 227.727 346.951 cv
228.172 345.906 232.56 344.604 234.442 343.902 cv
237.362 342.815 239.663 341.838 243.219 340.709 cv
245.343 340.035 245.348 341.373 245.459 342.707 cv
245.887 347.9 245.827 354.012 242.183 358.074 cv
cp
.157534 .446876 1 .009613 cmyk
f
232.856 356.016 mo
235.679 358.955 239.375 356.963 240.828 353.875 cv
242.138 351.093 242.56 348.113 242.137 344.551 cv
238.657 345.789 233.973 347.532 231.184 348.694 cv
230.626 348.927 231.072 354.156 232.856 356.016 cv
cp
.66128 .770535 0 0 cmyk
f
205.94 357.92 mo
208.744 360.857 214.394 361.629 217.969 358.641 cv
221.253 355.894 222.094 348.456 221.342 346.797 cv
220.867 345.751 216.191 344.449 214.186 343.747 cv
211.076 342.66 208.625 341.684 204.837 340.555 cv
202.573 339.88 202.568 341.219 202.45 342.553 cv
201.994 347.745 202.059 353.857 205.94 357.92 cv
cp
.157534 .446876 1 .009613 cmyk
f
215.875 355.861 mo
212.869 358.801 208.932 356.809 207.384 353.721 cv
205.988 350.938 205.537 347.959 205.989 344.397 cv
209.696 345.635 214.686 347.377 217.658 348.539 cv
218.253 348.772 217.777 354.002 215.875 355.861 cv
cp
.66128 .770535 0 0 cmyk
f
239.707 326.571 mo
238.346 324.979 235.143 321.981 230.7 320.881 cv
228.343 320.298 226.111 321.818 226.408 324.492 cv
226.706 327.182 229.068 327.744 233.011 331.732 cv
235.453 334.203 237.092 339.096 241.271 338.764 cv
242.331 338.68 243.567 338.121 243.998 337.059 cv
245.636 333.014 242.173 329.455 239.707 326.571 cv
cp
0 0 0 0 cmyk
f
195.242 354.22 mo
193.338 355.418 194.061 357.969 195.225 359.904 cv
196.368 361.805 198.465 363.244 200.716 362.649 cv
201.843 362.352 202.322 361.1 202.31 360.068 cv
202.292 358.318 197.625 352.719 195.242 354.22 cv
cp
f
248.163 381.57 mo
247.542 379.475 246.337 377.81 245.143 376.01 cv
244.104 374.442 243.094 373.018 241.063 373.016 cv
240.002 373.014 239.452 374.258 239.732 375.17 cv
240.318 377.075 242.456 381.294 245.209 383.73 cv
246.74 385.086 248.652 383.217 248.163 381.57 cv
cp
f
155.189 235.024 mo
153.06 235.801 150.825 235.74 148.598 235.671 cv
147.929 235.646 147.227 235.662 146.517 235.675 cv
147.427 237.325 148.036 239.222 148.39 240.653 cv
149.648 245.711 147.585 251.86 144.103 255.523 cv
142.435 257.281 139.817 257.634 137.685 256.727 cv
135.49 255.803 134.444 253.398 134.04 251.186 cv
133.56 248.578 134.23 246.148 132.539 243.87 cv
131.287 242.191 129.68 241.012 127.63 240.941 cv
124.989 244.963 122.038 246.691 118.018 247.789 cv
116.851 248.109 112.82 248.444 112.034 248.444 cv
110.961 248.444 111.264 248.184 111.212 249.1 cv
111.082 251.242 109.967 254.826 108.185 256.002 cv
103.956 258.791 100.428 254.891 99.2285 250.624 cv
98.8145 249.15 98.3496 248.881 96.9092 248.783 cv
95.6123 248.699 86.3018 248.699 84.9814 248.783 cv
83.5215 248.881 83.0469 249.15 82.625 250.624 cv
81.4063 254.891 77.8232 258.791 73.5234 256.002 cv
71.7109 254.826 70.5762 251.242 70.4463 249.1 cv
70.3906 248.184 70.7021 248.444 69.6094 248.444 cv
68.8105 248.444 64.7197 248.109 63.5293 247.789 cv
59.4434 246.691 56.4414 244.963 53.7588 240.941 cv
51.6768 241.012 50.0449 242.191 48.7715 243.87 cv
47.0508 246.148 47.7305 248.578 47.2461 251.186 cv
46.833 253.398 45.7686 255.803 43.542 256.727 cv
41.3711 257.634 38.7129 257.281 37.0156 255.523 cv
33.4785 251.86 31.377 245.711 32.6563 240.653 cv
33.0176 239.222 33.6367 237.325 34.5664 235.675 cv
33.8408 235.662 33.125 235.646 32.4463 235.671 cv
30.1826 235.74 27.9141 235.801 25.748 235.024 cv
22.373 233.816 19.1709 230.423 19.9424 226.537 cv
20.7559 222.414 24.4141 220.317 28.459 220.317 cv
29.7324 220.317 31.1641 220.369 32.6367 220.503 cv
30.6387 218.369 29.0723 215.953 27.9795 213.206 cv
25.916 208.031 23.9307 200.65 27.166 195.528 cv
28.5 193.413 30.9492 191.893 33.4971 192.771 cv
36.2627 193.725 37.625 196.555 38.3916 199.2 cv
39.2842 202.277 39.4746 204.755 42.6309 207.79 cv
44.1738 209.268 46.6699 210.351 48.9297 210.923 cv
50.3047 203.16 56.7061 195.663 62.8975 191.34 cv
66.8115 188.611 71.2178 187.003 75.9033 186.18 cv
80.5234 185.371 101.214 185.353 105.844 186.18 cv
110.455 187.003 114.792 188.611 118.64 191.34 cv
124.729 195.663 131.027 203.16 132.385 210.923 cv
134.606 210.351 137.061 209.268 138.576 207.79 cv
141.686 204.755 141.873 202.277 142.75 199.2 cv
143.504 196.555 144.848 193.725 147.566 192.771 cv
150.071 191.893 152.48 193.413 153.795 195.528 cv
156.979 200.65 155.021 208.031 152.995 213.206 cv
151.922 215.953 150.378 218.369 148.412 220.503 cv
149.857 220.369 151.267 220.317 152.521 220.317 cv
156.5 220.317 160.098 222.414 160.902 226.537 cv
161.66 230.423 158.508 233.816 155.189 235.024 cv
cp
.248386 .99118 1 .209598 cmyk
f
157.241 227.811 mo
156.109 235.005 145 230.901 140.471 232.226 cv
139.201 232.596 139.255 234.62 140.547 235.188 cv
144.542 236.944 145.144 241.336 144.668 244.788 cv
144.37 246.941 143.7 249.236 142.447 251.035 cv
141.918 251.795 141.144 253.05 140.087 253.086 cv
138.762 253.131 138.214 251.571 138.089 250.514 cv
137.642 246.709 137.34 243.22 134.864 240.498 cv
133.179 238.644 126.821 235.782 125.714 237.94 cv
125.066 238.795 122.134 245.079 112.414 244.502 cv
110.803 244.407 108.6 244.602 107.942 246.496 cv
107.223 248.564 108.127 251.797 106.013 253.213 cv
103.683 254.774 102.438 248.488 101.582 247.442 cv
100.483 246.1 98.9473 245.452 97.2393 245.367 cv
95.2773 245.268 86.6445 245.268 84.6494 245.367 cv
82.9121 245.452 81.3506 246.1 80.2344 247.442 cv
79.3643 248.488 78.0996 254.774 75.7314 253.213 cv
73.582 251.797 74.502 248.564 73.7705 246.496 cv
73.1016 244.602 70.8613 244.407 69.2246 244.502 cv
59.3457 245.079 56.3652 238.795 55.707 237.94 cv
54.582 235.782 48.1201 238.644 46.4063 240.498 cv
43.8906 243.22 43.584 246.709 43.1289 250.514 cv
43.002 251.571 42.4453 253.131 41.0977 253.086 cv
40.0254 253.05 39.2373 251.795 38.6992 251.035 cv
37.4258 249.236 36.7441 246.941 36.4424 244.788 cv
35.957 241.336 36.5693 236.944 40.6309 235.188 cv
41.9434 234.62 41.998 232.596 40.708 232.226 cv
36.1055 230.901 24.8125 235.005 23.6621 227.811 cv
22.542 220.807 35.4082 225.091 41.5469 225.243 cv
42.9805 225.197 43.1953 223.292 42.3086 222.48 cv
41.3945 221.645 40.2949 221.283 39.1914 220.741 cv
37.8838 220.097 36.7324 219.249 35.6455 218.288 cv
33.3232 216.233 31.9609 213.285 30.8955 210.444 cv
29.9238 207.855 29.3818 205.153 29.2617 202.393 cv
29.1924 200.799 30.4648 193.855 33.2637 197.058 cv
34.8262 198.848 35.0107 201.99 35.5957 204.207 cv
36.2402 206.649 37.7617 208.766 39.4941 210.543 cv
41.4297 212.529 46.4473 215.446 50.2813 214.981 cv
50.9932 214.975 51.832 213.978 52.082 213.049 cv
54.124 205.445 58.8359 199.083 65.1602 194.408 cv
68.6621 191.82 72.875 190.567 77.1123 189.837 cv
81.4473 189.091 100.915 189.183 104.654 189.837 cv
108.823 190.567 112.968 191.82 116.412 194.408 cv
122.636 199.083 127.271 205.445 129.28 213.049 cv
129.525 213.978 130.352 214.975 131.052 214.981 cv
134.824 215.446 139.761 212.529 141.666 210.543 cv
143.369 208.766 144.866 206.649 145.5 204.207 cv
146.076 201.99 146.258 198.848 147.796 197.058 cv
150.548 193.855 151.801 200.799 151.732 202.393 cv
151.614 205.153 151.08 207.855 150.125 210.444 cv
149.077 213.285 147.736 216.233 145.451 218.288 cv
144.383 219.249 143.25 220.097 141.962 220.741 cv
140.877 221.283 139.794 221.645 138.896 222.48 cv
138.023 223.292 138.235 225.197 139.645 225.243 cv
145.685 225.091 158.344 220.807 157.241 227.811 cv
cp
0 .980285 .995605 .000732 cmyk
f
115.285 227.229 mo
112.653 230.167 107.35 230.938 103.994 227.949 cv
100.912 225.202 100.122 217.764 100.828 216.105 cv
101.274 215.059 105.663 213.757 107.545 213.056 cv
110.465 211.968 112.766 210.992 116.321 209.862 cv
118.445 209.188 118.45 210.527 118.562 211.861 cv
118.99 217.053 118.929 223.165 115.285 227.229 cv
cp
.248386 .99118 1 .209598 cmyk
f
105.959 225.169 mo
108.781 228.109 112.477 226.117 113.931 223.029 cv
115.24 220.246 115.663 217.267 115.239 213.705 cv
111.76 214.943 107.076 216.686 104.286 217.848 cv
103.728 218.081 104.174 223.31 105.959 225.169 cv
cp
.025147 .308537 1 0 cmyk
f
67.7314 228.468 mo
70.5352 231.406 76.1855 232.178 79.7598 229.189 cv
83.043 226.441 83.8848 219.004 83.1328 217.344 cv
82.6572 216.298 77.9824 214.997 75.9766 214.295 cv
72.8672 213.208 70.415 212.231 66.627 211.102 cv
64.3643 210.428 64.3594 211.767 64.2402 213.101 cv
63.7852 218.292 63.8496 224.405 67.7314 228.468 cv
cp
.248386 .99118 1 .209598 cmyk
f
77.666 226.409 mo
74.6602 229.348 70.7227 227.356 69.1738 224.269 cv
67.7793 221.485 67.3281 218.506 67.7793 214.944 cv
71.4873 216.182 76.4775 217.925 79.4492 219.087 cv
80.043 219.32 79.5684 224.549 77.666 226.409 cv
cp
.025147 .308537 1 0 cmyk
f
96.5322 230.088 mo
93.3545 229.876 91.3027 229.74 86.8223 230.263 cv
84.1807 230.57 84.2148 233.458 86.7344 233.596 cv
88.4297 233.689 95.0225 233.621 96.7373 233.58 cv
99.502 233.516 100.019 230.32 96.5322 230.088 cv
cp
.248386 .99118 1 .209598 cmyk
f
123.755 204.741 mo
122.947 201.494 119.626 198.729 117.144 196.639 cv
115.011 194.844 111.336 192.426 108.435 193.103 cv
105.539 193.778 104.54 196.77 106.704 198.927 cv
108.236 200.454 110.436 201.515 112.157 202.865 cv
114.375 204.604 115.966 207.028 118.041 208.916 cv
119.246 210.012 121.25 209.933 122.51 209.005 cv
123.944 207.948 124.156 206.352 123.755 204.741 cv
cp
0 0 0 0 cmyk
f
63.125 236.129 mo
61.9629 234.92 61.0137 233.76 60.0664 232.355 cv
58.7686 230.431 56.1865 231.521 55.6719 233.414 cv
55.1035 235.506 56.4746 237.62 57.7373 239.162 cv
59.0088 240.717 61.1426 242.889 63.2715 242.788 cv
64.4053 242.734 65.3457 241.752 65.5293 240.673 cv
65.8535 238.764 64.248 237.297 63.125 236.129 cv
cp
f
150.783 202.782 mo
150.741 202.111 150.229 201.312 149.567 201.095 cv
149.076 200.935 148.74 200.863 148.228 200.993 cv
148.148 201.013 148.067 201.033 147.986 201.054 cv
147.249 201.241 146.871 201.993 146.687 202.648 cv
146.262 204.173 145.838 205.588 145.177 207.034 cv
144.469 208.582 143.521 210.011 143.223 211.709 cv
142.949 213.262 145.012 214.816 146.31 213.597 cv
148.945 211.12 151.011 206.424 150.783 202.782 cv
cp
f
155.923 226.292 mo
153.653 224.039 148.961 223.59 146.435 225.679 cv
145.471 226.477 145.613 228.523 147.137 228.591 cv
148.273 228.643 149.39 228.424 150.528 228.519 cv
151.905 228.633 153.188 229.166 154.541 229.395 cv
156.416 229.713 157.102 227.462 155.923 226.292 cv
cp
f
232.911 230.38 mo
231.517 230.654 229.332 231.487 228.557 230.059 cv
228.412 229.794 228.18 228.613 229.742 227.251 cv
231.001 226.4 232.897 225.801 234.524 225.778 cv
237.741 225.74 242.26 227.656 241.828 230.482 cv
241.548 232.304 237.337 230.356 236.472 230.18 cv
235.272 229.943 234.093 230.147 232.911 230.38 cv
cp
280.654 212.075 mo
279.711 207.747 276.736 199.612 268.639 195.727 cv
270.404 191.092 268.481 184.575 266.394 180.652 cv
264.418 176.919 259.355 171.323 255.205 175.739 cv
253.313 177.751 253.216 180.754 253.388 183.381 cv
253.564 186.035 254.099 190.613 250.292 190.493 cv
248.595 190.436 221.124 190.283 219.381 190.339 cv
215.481 190.46 216.029 185.881 216.211 183.227 cv
216.387 180.601 216.29 177.598 214.352 175.586 cv
210.098 171.17 204.915 176.766 202.884 180.499 cv
200.75 184.422 198.78 190.935 200.588 195.573 cv
192.137 199.612 189.241 207.594 188.275 211.922 cv
187.335 216.119 187.248 220.791 187.68 225.057 cv
188.13 229.474 190.278 233.285 193.341 236.423 cv
194.619 237.729 196.13 238.766 197.599 239.849 cv
198.343 240.396 199.035 240.982 199.705 241.619 cv
200.894 242.754 200.509 244.376 200.336 245.836 cv
199.965 249.047 199.993 253.04 202.434 255.489 cv
204.924 257.981 208.48 257.559 210.884 255.197 cv
213.436 252.691 215.42 249.21 216.462 245.785 cv
217.4 245.543 223.03 246.282 225.131 246.541 cv
227.334 246.821 242.534 246.974 244.682 246.699 cv
246.731 246.436 251.956 246.008 252.877 246.25 cv
253.89 249.675 256.098 252.845 258.584 255.351 cv
260.933 257.712 264.404 258.135 266.835 255.643 cv
269.22 253.193 269.247 249.201 268.881 245.993 cv
268.718 244.528 268.337 242.906 269.503 241.773 cv
270.154 241.141 270.828 240.551 271.554 240.002 cv
272.985 238.919 274.463 237.887 275.708 236.575 cv
278.703 233.439 280.795 229.627 281.235 225.215 cv
281.658 220.948 281.575 216.273 280.654 212.075 cv
cp
.52575 .218601 1 .031403 cmyk
f
272.056 234.117 mo
269.839 235.986 266.786 237.645 265.496 240.403 cv
264.145 243.291 265.307 246.171 265.137 249.194 cv
265.072 250.324 265.012 252.143 264.027 252.912 cv
262.578 254.048 261.265 252.709 260.408 251.479 cv
258.572 248.84 256.681 245.27 255.663 242.221 cv
255.199 240.827 248.469 242.154 246.439 242.268 cv
238.93 242.686 235.057 242.686 223.33 242.111 cv
221.25 242.011 214.449 240.516 213.489 242.753 cv
212.212 245.727 210.899 248.686 209.019 251.323 cv
208.142 252.554 206.796 253.893 205.31 252.758 cv
204.303 251.988 204.241 250.17 204.175 249.04 cv
204 246.016 205.19 243.137 203.807 240.249 cv
202.485 237.49 199.357 235.831 197.086 233.963 cv
191.19 229.113 191.363 220.991 192.331 214.101 cv
193.254 207.531 197.75 201.956 203.259 198.501 cv
204.687 197.907 205.217 197.489 204.884 196.212 cv
204.113 193.259 203.584 191.078 204.214 187.995 cv
204.735 185.44 205.787 182.787 207.235 180.615 cv
208.495 178.726 211.118 176.317 212.265 179.55 cv
213.08 181.847 212.178 184.85 212.304 187.256 cv
212.55 191.955 215.994 194.248 220.375 194.109 cv
223.099 194.023 246.665 194.177 249.324 194.264 cv
253.6 194.403 256.962 192.11 257.202 187.411 cv
257.325 185.004 256.444 182.002 257.241 179.705 cv
258.36 176.472 260.919 178.881 262.149 180.77 cv
263.563 182.942 264.59 185.595 265.099 188.15 cv
265.713 191.233 265.197 193.414 264.444 196.366 cv
264.119 197.645 264.495 197.907 266.03 198.656 cv
271.408 202.111 275.797 207.686 276.697 214.256 cv
277.643 221.145 277.81 229.267 272.056 234.117 cv
cp
.236057 0 .996185 0 cmyk
f
259.456 223.624 mo
256.825 226.561 251.521 227.333 248.166 224.344 cv
245.083 221.597 244.294 214.159 245 212.5 cv
245.446 211.454 249.834 210.153 251.717 209.451 cv
254.636 208.363 256.936 207.387 260.493 206.258 cv
262.617 205.584 262.621 206.922 262.733 208.257 cv
263.161 213.449 263.1 219.561 259.456 223.624 cv
cp
.52575 .218601 1 .031403 cmyk
f
250.131 221.564 mo
252.952 224.504 256.648 222.512 258.102 219.424 cv
259.411 216.642 259.834 213.662 259.41 210.1 cv
255.931 211.338 251.247 213.081 248.457 214.243 cv
247.899 214.476 248.346 219.705 250.131 221.564 cv
cp
.03772 .171603 .936614 0 cmyk
f
209.812 223.081 mo
212.616 226.019 218.265 226.79 221.84 223.802 cv
225.124 221.055 225.965 213.618 225.213 211.958 cv
224.738 210.912 220.063 209.61 218.058 208.909 cv
214.948 207.821 212.496 206.845 208.708 205.715 cv
206.445 205.041 206.44 206.38 206.321 207.714 cv
205.866 212.906 205.93 219.018 209.812 223.081 cv
cp
.52575 .218601 1 .031403 cmyk
f
219.747 221.022 mo
216.741 223.962 212.804 221.97 211.255 218.882 cv
209.859 216.099 209.409 213.12 209.86 209.558 cv
213.568 210.796 218.559 212.539 221.53 213.701 cv
222.123 213.934 221.649 219.163 219.747 221.022 cv
cp
.03772 .171603 .936614 0 cmyk
f
241.828 230.482 mo
241.548 232.304 237.337 230.356 236.472 230.18 cv
235.272 229.943 234.093 230.147 232.911 230.38 cv
231.517 230.654 229.332 231.487 228.557 230.059 cv
228.412 229.794 228.18 228.613 229.742 227.251 cv
231.001 226.4 232.897 225.801 234.524 225.778 cv
237.741 225.74 242.26 227.656 241.828 230.482 cv
cp
238.652 224.169 mo
235.277 222.999 231.415 223.087 227.459 226.122 cv
225.414 228.237 225.586 229.752 225.6 230.129 cv
225.698 232.146 228.105 232.992 229.779 233.248 cv
230.844 233.41 231.824 233.305 232.874 233.109 cv
234.683 232.773 236.044 232.727 237.82 233.27 cv
239.583 233.811 242.46 234.131 243.617 232.426 cv
246.332 228.413 241.832 225.271 238.652 224.169 cv
cp
.52575 .218601 1 .031403 cmyk
f
241.828 230.482 mo
241.548 232.304 237.337 230.356 236.472 230.18 cv
235.272 229.943 234.093 230.147 232.911 230.38 cv
231.517 230.654 229.332 231.487 228.557 230.059 cv
228.412 229.794 228.18 228.613 229.742 227.251 cv
231.001 226.4 232.897 225.801 234.524 225.778 cv
237.741 225.74 242.26 227.656 241.828 230.482 cv
cp
.664118 .398169 1 .281346 cmyk
f
264.145 188.778 mo
263.964 186.768 263.383 185.169 261.571 184.181 cv
260.496 183.595 259.128 184.672 259.284 185.831 cv
259.461 187.152 259.751 188.37 259.766 189.736 cv
259.783 191.348 259.688 192.845 260.583 194.259 cv
261.139 195.137 262.712 195.208 263.293 194.314 cv
264.374 192.65 264.318 190.693 264.145 188.778 cv
cp
0 0 0 0 cmyk
f
275.049 216.534 mo
274.893 212.104 272.996 205.863 269.06 203.384 cv
267.953 202.687 266.599 202.88 265.982 204.131 cv
265.115 205.895 266.342 207.133 266.903 208.714 cv
267.716 211.003 268.528 213.089 268.874 215.517 cv
269.602 220.645 266.962 225.159 266.88 230.143 cv
266.843 232.407 269.721 232.571 270.946 231.351 cv
274.494 227.82 275.217 221.268 275.049 216.534 cv
cp
f
203.516 233.744 mo
202.01 231.325 198.65 228.401 197.862 227.866 cv
196.853 227.182 195.419 227.663 195.461 228.681 cv
195.614 232.355 199.109 235.183 202.421 236.171 cv
203.741 236.564 204.303 235.01 203.516 233.744 cv
cp
f
150.384 348.295 mo
148.496 354.838 142.431 360.662 135.855 362.301 cv
139.757 366.043 142.246 371.982 142.411 377.021 cv
142.649 384.266 135.952 392.161 128.993 387.608 cv
126.805 386.177 125.63 383.208 124.572 380.858 cv
123.106 377.607 121.524 375.365 117.962 374.667 cv
114.822 374.051 73.3301 373.953 70.1367 374.546 cv
66.3711 375.244 64.7012 377.486 63.1533 380.737 cv
62.0371 383.087 60.7949 386.056 58.4805 387.487 cv
51.1279 392.04 44.0479 384.145 44.2998 376.899 cv
44.4746 371.861 47.1045 365.922 51.2305 362.18 cv
44.2803 360.54 37.8701 354.717 35.875 348.175 cv
34.5791 343.928 35.1719 339.205 38.6123 336.1 cv
42.5771 332.514 46.9688 333.873 50.1719 337.58 cv
52.4814 340.254 57.4756 346.228 60.2266 340.512 cv
62.4102 335.984 62.8867 331.228 66.1045 327.025 cv
70.0742 321.848 74.0195 319.454 79.2656 318.179 cv
84.6318 316.873 90.4561 316.873 95.2109 316.772 cv
100.282 316.752 104.757 317.125 109.324 318.3 cv
114.288 319.575 118.02 321.969 121.776 327.147 cv
124.824 331.35 125.275 336.105 127.343 340.633 cv
129.944 346.35 134.671 340.375 136.854 337.701 cv
139.888 333.994 144.042 332.635 147.798 336.222 cv
151.05 339.327 151.611 344.049 150.384 348.295 cv
cp
.878294 .722866 0 0 cmyk
f
140.852 354.949 mo
137.17 357.936 133.769 358.57 129.228 358.307 cv
126.06 358.123 125.819 360.793 127.781 361.884 cv
129.962 363.097 134.605 367.415 135.543 369.045 cv
137.392 372.254 139.023 376.838 137.501 380.539 cv
136.438 383.12 133.336 385.572 130.913 383.266 cv
129.359 381.787 128.604 379.586 127.633 377.689 cv
124.861 372.275 120.378 370.184 114.641 370.178 cv
111.728 370.175 77.1104 370.053 73.6465 370.056 cv
67.584 370.063 62.8457 372.154 59.917 377.566 cv
58.8916 379.465 58.0938 381.666 56.4512 383.145 cv
53.8906 385.451 50.6123 382.999 49.4893 380.418 cv
47.8799 376.717 49.6045 372.133 51.5576 368.922 cv
52.5488 367.294 57.4561 362.976 59.7607 361.763 cv
61.834 360.672 61.5811 358.002 58.2305 358.185 cv
53.4316 358.448 49.8398 357.815 45.9473 354.828 cv
42.5693 352.234 39.2148 348.146 39.2383 343.597 cv
39.2578 339.924 43.8682 336.406 47.6787 340.981 cv
49.9629 343.725 52.3252 346.315 55.9814 347.02 cv
65.0439 348.762 65.0566 335.669 68.3281 330.85 cv
72.3789 324.88 75.5195 323.936 79.916 322.326 cv
84.3506 320.703 104.269 320.73 108.708 322.447 cv
112.868 324.059 115.841 325.002 119.674 330.971 cv
122.769 335.791 122.781 348.883 131.357 347.139 cv
134.817 346.435 137.054 343.846 139.215 341.103 cv
142.82 336.527 147.184 340.045 147.201 343.718 cv
147.224 348.268 144.05 352.355 140.852 354.949 cv
cp
.695796 .314488 0 0 cmyk
f
82.2402 353.871 mo
79.4248 355.148 75.7754 353.914 74.626 351.154 cv
73.8145 349.213 73.9902 346.529 76.4355 344.807 cv
80.9004 342.38 83.8896 344.942 84.957 346.258 cv
87.1074 348.906 84.9531 352.645 82.2402 353.871 cv
cp
87.4375 345.859 mo
85.7334 342.457 82.2402 340.729 78.0176 341.574 cv
75.4404 342.181 71.4521 344.264 71.8447 350.252 cv
72.1553 354.973 77.7754 358.035 82.2061 356.676 cv
86.7773 355.27 89.6797 350.348 87.4375 345.859 cv
cp
.878294 .722866 0 0 cmyk
f
82.2065 353.871 mo
79.3911 355.148 75.7417 353.914 74.5923 351.154 cv
73.7817 349.213 73.9565 346.529 76.4019 344.807 cv
80.8667 342.38 83.856 344.942 84.9233 346.258 cv
87.0737 348.906 84.9194 352.645 82.2065 353.871 cv
cp
0 0 0 0 cmyk
f
110.251 354.328 mo
107.44 355.603 103.787 354.371 102.637 351.605 cv
101.826 349.669 102.001 346.985 104.452 345.263 cv
108.912 342.832 111.9 345.394 112.974 346.714 cv
115.123 349.363 112.964 353.095 110.251 354.328 cv
cp
115.448 346.31 mo
113.75 342.914 110.251 341.181 106.029 342.025 cv
103.452 342.633 99.4629 344.719 99.8555 350.702 cv
100.167 355.43 105.791 358.491 110.217 357.128 cv
114.788 355.725 117.69 350.8 115.448 346.31 cv
cp
.878294 .722866 0 0 cmyk
f
110.301 354.328 mo
107.491 355.603 103.837 354.371 102.686 351.605 cv
101.876 349.669 102.051 346.985 104.502 345.263 cv
108.962 342.832 111.951 345.394 113.023 346.714 cv
115.174 349.363 113.014 353.095 110.301 354.328 cv
cp
0 0 0 0 cmyk
f
81.7861 345.624 mo
79.7813 344.446 76.3184 346.033 76.1084 348.625 cv
75.9814 350.178 77.041 351.684 78.4375 352.103 cv
79.8398 352.823 81.6816 352.52 82.8623 351.283 cv
83.6455 350.465 85.0146 347.521 81.7861 345.624 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
109.708 345.986 mo
107.704 344.809 104.24 346.395 104.03 348.988 cv
103.904 350.541 104.963 352.047 106.359 352.465 cv
107.762 353.185 109.602 352.882 110.785 351.647 cv
111.567 350.826 112.936 347.883 109.708 345.986 cv
cp
f
98.584 355.291 mo
95.2656 355.07 93.125 354.928 88.4463 355.473 cv
85.6885 355.795 85.7246 358.81 88.3555 358.955 cv
90.125 359.051 97.0078 358.98 98.7988 358.938 cv
101.685 358.871 102.224 355.535 98.584 355.291 cv
cp
.878294 .722866 0 0 cmyk
f
118.65 331.963 mo
116.283 328.15 111.419 323.916 106.494 324.54 cv
104.826 324.752 103.581 326.879 104.816 328.308 cv
106.025 329.705 109.2 331.4 112.373 336.336 cv
114.695 339.947 115.029 345.139 118.936 347.514 cv
120.108 348.226 121.456 347.8 121.912 346.588 cv
122.813 344.197 122.7 338.487 118.65 331.963 cv
cp
0 0 0 0 cmyk
f
145.504 344.533 mo
145.153 343.797 144.213 343.142 143.37 343.584 cv
142.305 344.143 141.937 344.842 141.29 345.822 cv
140.5 347.02 139.694 348.172 138.819 349.309 cv
137.694 350.771 135.813 351.832 134.923 353.406 cv
134.519 354.121 134.887 355.004 135.433 355.505 cv
137.461 357.367 140.337 354.449 141.729 353.105 cv
143.534 351.362 146.761 347.171 145.504 344.533 cv
cp
f
133.554 368.237 mo
132.434 366.457 130.185 364.214 127.936 364.383 cv
126.677 364.478 125.979 366.044 126.752 367.044 cv
127.78 368.375 129.063 369.434 130.011 370.851 cv
131.179 372.599 131.412 374.794 132.453 376.604 cv
133.291 378.064 135.544 377.258 135.786 375.801 cv
136.222 373.172 134.92 370.407 133.554 368.237 cv
cp
f
77.7031 366.461 mo
76.6621 366.19 75.584 366.085 74.5117 365.994 cv
73.4648 365.905 72.375 365.781 71.375 366.162 cv
70.3096 366.566 70.2363 368.161 71.3105 368.611 cv
72.2764 369.017 73.3711 369.067 74.4014 369.221 cv
75.459 369.379 76.5645 369.486 77.6123 369.251 cv
79.1719 368.901 79.3037 366.878 77.7031 366.461 cv
cp
f
102.017 76.4775 mo
101.24 74.6182 101.408 72.0479 103.755 70.3984 cv
108.027 68.0732 110.891 70.5225 111.918 71.7871 cv
113.977 74.3262 111.908 77.9043 109.31 79.0811 cv
106.618 80.3027 103.118 79.1221 102.017 76.4775 cv
cp
75.1865 76.041 mo
74.4106 74.1855 74.5776 71.6152 76.9204 69.9658 cv
81.1968 67.6367 84.0605 70.0908 85.083 71.3555 cv
87.1421 73.8936 85.0786 77.4678 82.48 78.6484 cv
79.7837 79.8711 76.2886 78.6904 75.1865 76.041 cv
cp
91.3438 87.54 mo
89.9492 87.8145 87.7598 88.6465 86.9839 87.2197 cv
86.8403 86.9551 86.6123 85.7744 88.1738 84.4082 cv
89.4336 83.5625 91.3301 82.957 92.957 82.9385 cv
96.1738 82.8965 100.691 84.8164 100.26 87.6426 cv
99.9756 89.4609 95.7646 87.5127 94.9004 87.3408 cv
93.7051 87.0986 92.5205 87.3086 91.3438 87.54 cv
cp
128.363 76.1016 mo
129.344 72.8379 130.144 69.5098 130.743 66.1494 cv
132.719 55.0811 135.563 38.3613 123.887 31.8359 cv
118.31 28.7168 112.466 30.6133 106.87 32.6025 cv
103.467 33.8105 100.538 35.3867 89.918 35.2012 cv
86.166 35.1309 82.5869 33.6533 79.0449 32.4492 cv
73.2114 30.46 67.1265 28.5586 61.3164 31.6777 cv
49.1519 38.208 52.1172 54.9287 54.1768 65.9961 cv
54.7993 69.3564 55.6313 72.6846 56.6494 75.9473 cv
57.793 79.6104 59.5127 83.0547 60.689 86.7041 cv
62.9199 93.6387 58.6807 98.9756 56.4404 105.223 cv
54.7251 110.02 55.0459 117.085 61.5532 117.415 cv
66.4946 117.666 71.1895 114.301 74.1455 110.452 cv
74.9546 115.002 77.7715 119.14 82.4893 120.106 cv
86.1572 120.859 89.5215 118.006 91.5303 115.291 cv
92.167 114.426 92.7246 113.459 93.2031 112.437 cv
93.6777 113.516 94.2402 114.537 94.8809 115.444 cv
96.8057 118.158 100.041 121.018 103.56 120.265 cv
108.088 119.292 110.793 115.156 111.569 110.605 cv
114.404 114.454 118.913 117.824 123.659 117.573 cv
129.906 117.244 130.213 110.173 128.567 105.376 cv
126.42 99.1289 122.348 93.793 124.491 86.8574 cv
125.616 83.208 127.27 79.7646 128.363 76.1016 cv
cp
.861875 .4224 .365393 .080964 cmyk
f
120.726 84.4795 mo
118.991 90.1113 119.395 95.0283 121.788 100.381 cv
122.889 102.843 128.908 115.24 121.746 112.973 cv
116.341 111.261 114.185 106.817 111.547 102.086 cv
110.935 100.99 109.648 100.886 108.918 101.531 cv
108.437 101.751 108.059 102.249 107.995 102.797 cv
107.676 105.51 108.043 108.409 107.074 111.009 cv
106.354 112.94 104.628 116.188 102.138 115.636 cv
97.2549 114.557 96.709 107.728 95.0742 103.708 cv
95.0732 103.652 95.0742 103.596 95.0723 103.541 cv
94.999 101.622 92.3477 101.428 91.5879 102.977 cv
89.6699 106.882 89.3086 114.349 83.9702 115.481 cv
81.377 116.032 79.5786 112.786 78.8286 110.854 cv
77.8198 108.254 78.2012 105.354 77.8696 102.643 cv
77.8027 102.094 77.4087 101.597 76.9082 101.377 cv
76.1475 100.73 74.8066 100.835 74.1694 101.932 cv
71.4209 106.662 69.1763 111.106 63.5459 112.818 cv
56.0854 115.086 62.3555 102.688 63.502 100.226 cv
65.9937 94.874 66.4155 89.957 64.6094 84.3252 cv
63.6143 81.2217 62.1621 78.2676 61.1011 75.1816 cv
59.9268 71.7695 59.127 68.2363 58.4683 64.6934 cv
56.7583 55.4922 53.2959 36.8057 66.6685 34.5234 cv
69.6807 34.0098 72.8857 35.0742 75.7046 36.0127 cv
78.5024 36.9434 81.2554 38.0039 84.1475 38.5908 cv
92.791 40.3477 99.1484 39.4785 101.968 38.7461 cv
104.717 38.0342 107.388 37.0977 110.073 36.167 cv
112.779 35.2285 115.856 34.1641 118.749 34.6787 cv
131.587 36.96 128.263 55.6475 126.62 64.8477 cv
125.988 68.3916 125.221 71.9238 124.093 75.3379 cv
123.074 78.4229 121.681 81.376 120.726 84.4795 cv
cp
.644587 0 .169223 0 cmyk
f
82.605 78.6484 mo
79.9087 79.8711 76.4136 78.6904 75.3115 76.041 cv
74.5356 74.1855 74.7026 71.6152 77.0454 69.9658 cv
81.3218 67.6367 84.1855 70.0908 85.208 71.3555 cv
87.2671 73.8936 85.2036 77.4678 82.605 78.6484 cv
cp
87.583 70.9688 mo
85.9517 67.7158 82.605 66.0566 78.561 66.8652 cv
76.0928 67.4463 72.272 69.4453 72.6484 75.1768 cv
72.9458 79.7041 78.3286 82.6367 82.5728 81.3311 cv
86.9512 79.9863 89.7305 75.2686 87.583 70.9688 cv
cp
.861875 .4224 .365393 .080964 cmyk
f
82.6655 78.7109 mo
79.9692 79.9336 76.4736 78.7529 75.3721 76.1035 cv
74.5957 74.248 74.7632 71.6777 77.106 70.0283 cv
81.3823 67.6992 84.2456 70.1533 85.2681 71.418 cv
87.3276 73.9561 85.2637 77.5303 82.6655 78.7109 cv
cp
0 0 0 0 cmyk
f
109.31 79.0811 mo
106.618 80.3027 103.118 79.1221 102.017 76.4775 cv
101.24 74.6182 101.408 72.0479 103.755 70.3984 cv
108.027 68.0732 110.891 70.5225 111.918 71.7871 cv
113.977 74.3262 111.908 77.9043 109.31 79.0811 cv
cp
114.288 71.4063 mo
112.661 68.1484 109.31 66.4883 105.266 67.2969 cv
102.798 67.8779 98.9766 69.877 99.3535 75.6084 cv
99.6504 80.1367 105.038 83.0693 109.277 81.7676 cv
113.656 80.4189 116.435 75.7012 114.288 71.4063 cv
cp
.861875 .4224 .365393 .080964 cmyk
f
109.277 79.0811 mo
106.584 80.3027 103.084 79.1221 101.983 76.4775 cv
101.206 74.6182 101.374 72.0479 103.721 70.3984 cv
107.994 68.0732 110.857 70.5225 111.884 71.7871 cv
113.943 74.3262 111.874 77.9043 109.277 79.0811 cv
cp
0 0 0 0 cmyk
f
82.0454 70.7451 mo
80.125 69.6172 76.8081 71.1367 76.6069 73.6201 cv
76.4858 75.1074 77.501 76.5498 78.8379 76.9512 cv
80.1812 77.6406 81.9448 77.3496 83.0762 76.166 cv
83.8267 75.3809 85.1377 72.5615 82.0454 70.7451 cv
cp
.857603 .555138 .721797 .691279 cmyk
f
108.79 71.0918 mo
106.87 69.9648 103.553 71.4844 103.352 73.9668 cv
103.23 75.4541 104.245 76.8965 105.583 77.2979 cv
106.927 77.9883 108.689 77.6973 109.821 76.5137 cv
110.57 75.7285 111.882 72.9092 108.79 71.0918 cv
cp
f
100.26 87.6426 mo
99.9756 89.4609 95.7646 87.5127 94.9004 87.3408 cv
93.7051 87.0986 92.5205 87.3086 91.3438 87.54 cv
89.9492 87.8145 87.7598 88.6465 86.9839 87.2197 cv
86.8403 86.9551 86.6123 85.7744 88.1738 84.4082 cv
89.4336 83.5625 91.3301 82.957 92.957 82.9385 cv
96.1738 82.8965 100.691 84.8164 100.26 87.6426 cv
cp
97.085 81.3311 mo
93.7109 80.1543 89.8477 80.2471 85.8921 83.2832 cv
83.8462 85.3926 84.0137 86.9131 84.0327 87.29 cv
84.126 89.3027 86.5332 90.1533 88.2109 90.4092 cv
89.2715 90.5713 90.252 90.4639 91.3027 90.2695 cv
93.1113 89.9346 94.4727 89.8828 96.249 90.4316 cv
98.0146 90.9707 100.892 91.292 102.05 89.5859 cv
104.759 85.5752 100.265 82.4316 97.085 81.3311 cv
cp
.861875 .4224 .365393 .080964 cmyk
f
100.26 87.6426 mo
99.9756 89.4609 95.7646 87.5127 94.9004 87.3408 cv
93.7051 87.0986 92.5205 87.3086 91.3438 87.54 cv
89.9492 87.8145 87.7598 88.6465 86.9839 87.2197 cv
86.8403 86.9551 86.6123 85.7744 88.1738 84.4082 cv
89.4336 83.5625 91.3301 82.957 92.957 82.9385 cv
96.1738 82.8965 100.691 84.8164 100.26 87.6426 cv
cp
.857603 .555138 .721797 .691279 cmyk
f
124.414 48.3555 mo
121.927 41.6357 114.656 37.7725 107.721 39.1182 cv
105.764 39.498 104.137 41.8652 105.69 43.6787 cv
107.473 45.7598 110.109 45.6074 112.496 46.5605 cv
114.631 47.4121 116.188 49.1064 117.067 51.1758 cv
118.175 53.7842 118.471 56.7715 118.302 59.5742 cv
118.095 63.0283 116.522 67.0801 117.772 70.4238 cv
118.584 72.5977 121.101 72.5723 122.552 71.168 cv
125.136 68.668 125.692 63.4023 126.03 59.9873 cv
126.419 56.0605 125.78 52.0459 124.414 48.3555 cv
cp
0 0 0 0 cmyk
f
121.102 103.713 mo
120.662 101.463 119.816 99.3154 119.12 97.1367 cv
118.314 94.6172 118.192 91.9229 117.316 89.4326 cv
116.967 88.4375 115.255 88.2568 114.909 89.3701 cv
113.432 94.1318 115.662 100.819 118.567 104.686 cv
119.352 105.731 121.38 105.139 121.102 103.713 cv
cp
f
66.3955 96.0605 mo
65.4204 96.9131 65.3794 98.1475 64.9766 99.3232 cv
64.5566 100.551 64.0381 101.906 63.9082 103.199 cv
63.7915 104.362 65.332 105.26 66.1094 104.179 cv
66.7998 103.22 67.2446 102.11 67.7012 101.025 cv
67.9277 100.487 68.4048 98.0381 68.4375 97.3086 cv
68.5127 95.6377 67.2915 95.2773 66.3955 96.0605 cv
cp
f
322.376 209.349 mo
323.919 202.455 327.345 195.668 331.803 189.914 cv
333.489 186.957 336.446 185.628 336.251 182.416 cv
336.088 179.733 336.015 176.848 336.418 174.184 cv
337.009 170.34 340.216 165.616 344.307 168.294 cv
347.783 170.572 350.572 175.452 352.371 179.413 cv
352.743 180.226 366.102 179.608 368.18 180.222 cv
368.663 178.921 372.703 173.114 374.032 171.506 cv
375.757 169.419 378.866 166.64 381.832 167.891 cv
385.406 169.392 385.709 174.318 386.216 177.633 cv
386.499 179.487 386.392 183.267 387.88 184.6 cv
396.59 192.419 399.054 202.799 400.625 211.951 cv
401.615 217.73 402.554 223.535 403.283 229.354 cv
403.911 234.347 404.307 238.655 404.135 244.852 cv
404.042 248.287 402.739 251.634 401.75 251.67 cv
397.799 251.828 392.844 244.639 390.71 241.793 cv
389.534 243.783 385.555 253.313 383.157 253.414 cv
380.447 253.53 374.046 244.415 372.852 243.309 cv
372.8 243.262 372.745 243.211 372.693 243.164 cv
371.629 245.461 366.888 254.692 363.75 254.692 cv
360.767 254.692 353.06 243.42 353.06 243.42 cv
352.943 243.536 345.041 254.153 341.787 253.879 cv
339.114 253.656 333.342 242.389 332.467 240.361 cv
331.277 241.756 330.026 243.843 328.461 245.475 cv
326.602 247.413 324.51 250.667 321.8 250.393 cv
319.824 250.197 319.169 243.82 319.141 241.124 cv
319.039 230.446 320.033 219.788 322.376 209.349 cv
cp
.690394 1 .199039 .065583 cmyk
f
322.788 233.251 mo
322.803 228.869 323.193 215.996 326.913 206.447 cv
329.024 201.026 331.482 196.402 335.233 191.722 cv
337.325 189.63 338.284 188.154 339.276 186.883 cv
340.739 185.011 340.221 182.608 340.302 180.436 cv
340.39 178.078 340.133 175.58 340.921 173.315 cv
341.882 170.555 343.482 173 344.483 174.391 cv
345.893 176.349 347.089 178.337 348.164 180.498 cv
349.072 182.323 349.785 183.212 351.851 183.471 cv
353.063 183.624 354.975 183.609 356.188 183.527 cv
357.603 183.432 362.254 183.629 363.82 183.703 cv
365.232 183.771 367.909 183.908 369.325 183.9 cv
371.141 183.936 372.405 181.331 373.243 180.007 cv
374.285 178.359 376.37 174.406 378.972 172.652 cv
380.719 171.475 380.967 172.56 381.346 174.238 cv
382.059 177.402 382.079 180.83 383.082 183.909 cv
383.924 186.492 385.783 187.422 388.224 190.095 cv
392.888 195.881 394.576 201.348 396.172 208.792 cv
398.158 218.065 399.151 227.151 400.105 236.584 cv
400.163 237.162 400.458 246.137 399.801 245.939 cv
398.085 245.421 393.513 239.581 392.103 238.075 cv
389.563 235.357 389.423 235.994 388.63 237.224 cv
387.611 238.799 383.31 248.727 382.846 248.805 cv
382.216 248.91 372.697 236.913 371.651 237.844 cv
369.851 239.443 364.725 249.668 363.75 249.813 cv
362.703 249.968 354.383 238.656 352.826 238.656 cv
351.78 238.656 342.757 248.558 342.174 248.883 cv
341.334 248.58 335.859 238.992 334.515 236.664 cv
333.651 235.171 333.071 234.125 330.863 236.564 cv
328.871 238.767 327.609 240.283 323.216 244.685 cv
322.535 245.367 322.781 235.48 322.788 233.251 cv
cp
.379309 .820188 0 0 cmyk
f
383.201 228.515 mo
380.57 231.452 375.267 232.224 371.911 229.234 cv
368.829 226.488 368.039 219.051 368.746 217.392 cv
369.191 216.346 373.58 215.044 375.462 214.342 cv
378.382 213.254 380.682 212.278 384.238 211.148 cv
386.362 210.475 386.367 211.814 386.478 213.148 cv
386.906 218.34 386.846 224.451 383.201 228.515 cv
cp
.690394 1 .199039 .065583 cmyk
f
373.876 226.455 mo
376.697 229.395 380.394 227.403 381.848 224.315 cv
383.157 221.533 383.58 218.554 383.156 214.991 cv
379.676 216.229 374.992 217.973 372.203 219.135 cv
371.645 219.366 372.091 224.596 373.876 226.455 cv
cp
.001404 .29218 1 0 cmyk
f
340.762 228.205 mo
343.565 231.144 349.216 231.915 352.79 228.926 cv
356.074 226.178 356.916 218.741 356.163 217.082 cv
355.688 216.036 351.013 214.734 349.008 214.032 cv
345.898 212.945 343.446 211.969 339.658 210.839 cv
337.395 210.165 337.391 211.504 337.271 212.838 cv
336.815 218.029 336.881 224.143 340.762 228.205 cv
cp
.690394 1 .199039 .065583 cmyk
f
350.697 226.146 mo
347.691 229.085 343.754 227.094 342.205 224.006 cv
340.81 221.223 340.359 218.244 340.81 214.682 cv
344.519 215.92 349.509 217.662 352.48 218.825 cv
353.074 219.057 352.599 224.286 350.697 226.146 cv
cp
.001404 .29218 1 0 cmyk
f
367 232 mo
363.821 231.787 361.77 231.65 357.289 232.174 cv
354.648 232.481 354.683 235.369 357.202 235.508 cv
358.897 235.601 365.49 235.532 367.205 235.492 cv
369.97 235.428 370.486 232.231 367 232 cv
cp
.690394 1 .199039 .065583 cmyk
f
328.313 232.011 mo
328.259 229.529 328.272 227.059 328.54 224.498 cv
328.794 222.057 327.021 221.939 326.335 223.004 cv
324.784 225.408 324.207 230.063 325.546 232.739 cv
326.302 234.248 328.35 233.646 328.313 232.011 cv
cp
0 0 0 0 cmyk
f
385.144 189.172 mo
383.56 188.003 380.799 189.352 381.318 191.476 cv
381.795 193.423 382.916 195.059 383.723 196.877 cv
384.611 198.877 385.447 200.9 386.233 202.945 cv
387.823 207.085 388.726 211.427 390.568 215.46 cv
391.51 217.524 395.133 217.308 395.186 214.766 cv
395.288 209.992 393.884 205.606 392.235 201.161 cv
390.716 197.064 388.791 191.859 385.144 189.172 cv
cp
f
393.49 225.326 mo
392.957 226.762 393.024 228.303 392.969 229.814 cv
392.943 230.526 392.725 232.942 392.71 233.455 cv
392.683 234.297 393.118 235.181 394.062 235.278 cv
396.195 235.497 397.481 233.028 397.471 231.315 cv
397.457 229.239 397.343 227.412 396.551 225.389 cv
396.043 224.096 394.008 223.93 393.49 225.326 cv
cp
f
277.123 137.128 mo
277.123 141.415 257.481 144.89 233.251 144.89 cv
209.02 144.89 189.378 141.415 189.378 137.128 cv
189.378 132.841 209.02 129.365 233.251 129.365 cv
257.481 129.365 277.123 132.841 277.123 137.128 cv
cp
.705837 .634333 .609003 .769009 cmyk
f
269.964 110.677 mo
267.208 114.989 262.327 114.032 258.747 111.764 cv
255.763 109.867 253.536 106.902 252.058 103.532 cv
247.749 110.481 243.649 115.213 233.19 115.562 cv
228.557 115.716 223.257 112.982 220.004 109.631 cv
218.465 108.05 216.89 105.978 215.918 103.736 cv
214.281 106.926 211.888 109.719 208.723 111.532 cv
204.757 113.801 199.352 114.758 196.298 110.443 cv
193.253 106.14 193.151 100.362 193.267 95.3008 cv
193.401 89.3682 193.597 83.418 194.434 77.5391 cv
196.019 66.4473 199.449 54.334 206.798 45.582 cv
210.205 41.5293 214.523 38.2383 219.664 36.7646 cv
231.796 33.2871 244.868 35.6631 248.87 36.9971 cv
253.495 38.5352 257.409 41.7607 260.485 45.8145 cv
267.124 54.5674 270.22 66.6807 271.645 77.7715 cv
272.403 83.6514 272.575 89.6016 272.701 95.5322 cv
272.804 100.594 272.716 106.373 269.964 110.677 cv
cp
.832425 .413306 .721859 .327947 cmyk
f
268.21 103.48 mo
267.94 105.073 267.532 107.335 266.317 108.419 cv
264.783 109.788 262.733 109.216 261.178 108.115 cv
257.72 105.67 256.189 102.451 254.331 98.5576 cv
253.295 96.3877 250.833 97.0127 250.104 98.3252 cv
246.654 104.555 241.311 110.348 233.821 110.624 cv
230.114 110.76 226.664 109.367 223.87 107.015 cv
221.028 104.622 220.015 101.252 218.272 98.1035 cv
217.387 96.5039 215.062 95.2256 213.616 98.3252 cv
211.756 102.313 209.862 105.437 206.032 107.884 cv
204.308 108.984 202.038 109.556 200.339 108.187 cv
198.993 107.104 198.542 104.841 198.243 103.248 cv
197.343 98.4502 197.78 93.332 198.001 88.4883 cv
198.233 83.3682 198.8 78.2676 199.766 73.2324 cv
201.491 64.2402 204.892 54.9375 210.843 47.8574 cv
213.793 44.3486 217.686 42.0957 222.042 40.8018 cv
230.519 38.2842 240.279 38.6328 246.726 41.0352 cv
250.603 42.4795 254.171 44.5811 256.834 48.0889 cv
262.207 55.1699 265.277 64.4727 266.835 73.4648 cv
267.706 78.499 268.217 83.6016 268.428 88.7217 cv
268.627 93.5654 269.022 98.6826 268.21 103.48 cv
cp
.729427 0 .650599 0 cmyk
f
263.595 65.7188 mo
262.627 61.8613 261.401 57.9551 259.765 54.3232 cv
258.282 51.0303 255.955 48.0547 253.044 45.9102 cv
250.417 43.9766 246.161 41.7412 242.903 43.0313 cv
241.239 43.6895 240.962 45.8369 242.252 47.2139 cv
243.102 48.1211 244.115 49.1338 249.069 51.9453 cv
251.492 53.3203 253.497 56.8193 254.466 59.3711 cv
255.635 62.4551 256.016 65.1777 256.828 68.3711 cv
257.712 71.8467 257.82 76.3682 260.44 78.9844 cv
261.632 80.1738 263.637 79.3633 264.285 78.0498 cv
265.977 74.6221 264.481 69.2461 263.595 65.7188 cv
cp
0 0 0 0 cmyk
f
265.978 91.6719 mo
264.766 90.1504 262.815 90.3379 262.429 92.0352 cv
262.126 93.3594 262.453 94.8213 262.608 96.1533 cv
262.796 97.7705 262.741 99.3154 263.552 100.773 cv
264.239 102.01 265.944 101.432 266.489 100.454 cv
267.868 97.9766 267.403 93.459 265.978 91.6719 cv
cp
f
229.911 105.73 mo
229.153 104.382 227.688 103.381 226.726 102.161 cv
225.743 100.917 224.903 99.5088 224.175 98.0996 cv
223.738 97.2539 222.431 97.0039 222.004 98.043 cv
221.091 100.272 222.028 102.224 223.216 104.15 cv
224.377 106.033 226.51 108.132 228.849 108.115 cv
230.127 108.105 230.407 106.614 229.911 105.73 cv
cp
f
225.899 86.0195 mo
222.956 87.3545 219.14 86.0654 217.936 83.1729 cv
217.089 81.1475 217.271 78.3418 219.829 76.54 cv
224.498 73.998 227.625 76.6768 228.741 78.0576 cv
230.989 80.8291 228.736 84.7314 225.899 86.0195 cv
cp
231.334 77.6357 mo
229.554 74.084 225.899 72.2725 221.483 73.1553 cv
218.789 73.79 214.618 75.9727 215.028 82.2295 cv
215.353 87.1729 221.23 90.374 225.864 88.9492 cv
230.644 87.4805 233.679 82.3301 231.334 77.6357 cv
cp
.832425 .413306 .721859 .327947 cmyk
f
225.966 86.0879 mo
223.021 87.4229 219.205 86.1338 218.003 83.2412 cv
217.155 81.2158 217.337 78.4092 219.895 76.6084 cv
224.564 74.0654 227.69 76.7451 228.807 78.126 cv
231.056 80.8965 228.802 84.7988 225.966 86.0879 cv
cp
0 0 0 0 cmyk
f
225.288 77.3916 mo
223.191 76.1602 219.57 77.8184 219.351 80.5303 cv
219.218 82.1543 220.327 83.7285 221.786 84.167 cv
223.253 84.9199 225.179 84.6016 226.413 83.3096 cv
227.233 82.4521 228.664 79.374 225.288 77.3916 cv
cp
0 .994537 .828641 0 cmyk
f
236.733 69.2949 mo
234.036 70.5176 230.542 69.3369 229.439 66.6875 cv
228.663 64.832 228.831 62.2617 231.173 60.6123 cv
235.45 58.2832 238.313 60.7373 239.336 62.002 cv
241.395 64.54 239.331 68.1143 236.733 69.2949 cv
cp
241.711 61.6152 mo
240.079 58.3623 236.733 56.7031 232.688 57.5117 cv
230.221 58.0928 226.399 60.0918 226.776 65.8232 cv
227.073 70.3506 232.456 73.2832 236.7 71.9775 cv
241.079 70.6328 243.858 65.915 241.711 61.6152 cv
cp
.832425 .413306 .721859 .327947 cmyk
f
236.794 69.3574 mo
234.097 70.5801 230.602 69.3994 229.5 66.75 cv
228.724 64.8945 228.892 62.3242 231.233 60.6748 cv
235.511 58.3457 238.374 60.7998 239.395 62.0645 cv
241.456 64.6025 239.392 68.1768 236.794 69.3574 cv
cp
0 0 0 0 cmyk
f
236.173 61.3916 mo
234.253 60.2637 230.936 61.7832 230.735 64.2666 cv
230.614 65.7539 231.629 67.1963 232.966 67.5977 cv
234.31 68.2871 236.073 67.9961 237.204 66.8125 cv
237.954 66.0273 239.266 63.208 236.173 61.3916 cv
cp
0 .994537 .828641 0 cmyk
f
245.733 85.5449 mo
243.036 86.7676 239.542 85.5869 238.439 82.9375 cv
237.663 81.082 237.831 78.5117 240.173 76.8623 cv
244.45 74.5332 247.313 76.9873 248.336 78.252 cv
250.395 80.79 248.331 84.3643 245.733 85.5449 cv
cp
250.711 77.8652 mo
249.079 74.6123 245.733 72.9531 241.688 73.7617 cv
239.221 74.3428 235.399 76.3418 235.776 82.0732 cv
236.073 86.6006 241.456 89.5332 245.7 88.2275 cv
250.079 86.8828 252.858 82.165 250.711 77.8652 cv
cp
.832425 .413306 .721859 .327947 cmyk
f
245.794 85.6074 mo
243.097 86.8301 239.602 85.6494 238.5 83 cv
237.724 81.1445 237.892 78.5742 240.233 76.9248 cv
244.511 74.5957 247.374 77.0498 248.395 78.3145 cv
250.456 80.8525 248.392 84.4268 245.794 85.6074 cv
cp
0 0 0 0 cmyk
f
245.173 77.6416 mo
243.253 76.5137 239.936 78.0332 239.735 80.5166 cv
239.614 82.0039 240.629 83.4463 241.966 83.8477 cv
243.31 84.5371 245.073 84.2461 246.204 83.0625 cv
246.954 82.2773 248.266 79.458 245.173 77.6416 cv
cp
0 .994537 .828641 0 cmyk
f
408.87 136.982 mo
408.87 141.269 389.228 144.744 364.998 144.744 cv
340.768 144.744 321.125 141.269 321.125 136.982 cv
321.125 132.695 340.768 129.22 364.998 129.22 cv
389.228 129.22 408.87 132.695 408.87 136.982 cv
cp
.705837 .634333 .609003 .769009 cmyk
f
418.162 105.912 mo
416.559 110.825 410.583 110.998 406.438 109.222 cv
405.055 108.629 403.801 107.72 402.74 106.61 cv
401.944 109.474 400.094 111.908 397.035 112.554 cv
393.729 113.252 390.721 111.396 388.679 108.709 cv
387.26 112.011 384.185 114.463 379.806 114.608 cv
376.288 114.724 373.469 113.014 371.463 110.265 cv
371.308 110.057 371.153 109.822 370.998 109.585 cv
369.58 113.469 366.689 116.314 361.975 114.631 cv
359.743 113.83 358.033 112.147 357.057 110.074 cv
357.012 110.137 356.969 110.202 356.924 110.265 cv
354.967 113.014 352.209 114.724 348.767 114.608 cv
344.489 114.463 341.488 112.011 340.101 108.709 cv
338.107 111.396 335.164 113.252 331.935 112.554 cv
328.947 111.908 327.136 109.474 326.357 106.61 cv
325.318 107.72 324.1 108.629 322.748 109.222 cv
318.695 110.998 312.857 110.825 311.289 105.912 cv
310.564 103.641 311.258 101.025 311.992 98.8506 cv
312.981 95.9297 314.135 93.084 314.798 90.0605 cv
316.115 84.0293 315.598 77.7979 316.715 71.7354 cv
317.666 66.5742 318.934 61.0635 321.854 56.6226 cv
324.497 52.6143 328.394 49.4946 332.708 47.4399 cv
337.047 45.376 341.833 44.1523 346.627 43.8076 cv
351.957 43.4272 376.544 43.4272 381.997 43.8076 cv
386.902 44.1523 391.803 45.376 396.239 47.4399 cv
400.658 49.4946 404.648 52.6143 407.35 56.6226 cv
410.34 61.0635 411.636 66.5742 412.607 71.7354 cv
413.756 77.7979 413.222 84.0293 414.574 90.0605 cv
415.25 93.084 416.43 95.9297 417.441 98.8506 cv
418.193 101.025 418.904 103.641 418.162 105.912 cv
cp
.015198 .958679 .313481 0 cmyk
f
414.441 103.779 mo
414.24 106.55 411.299 106.771 409.043 105.97 cv
405.121 104.576 403.938 101.18 402.072 97.8965 cv
401.3 96.5361 399.012 96.7959 399.137 98.8848 cv
399.266 101.047 399.609 108.954 395.617 108.197 cv
391.283 107.376 390.511 103.02 389.035 99.7695 cv
388.185 97.9004 386.27 98.7842 386.013 100.647 cv
386.012 100.653 386.012 100.659 386.012 100.664 cv
385.498 102.667 385.721 104.813 384.823 106.718 cv
383.814 108.857 381.444 110.269 379.004 110.012 cv
376.519 109.75 374.783 107.572 373.838 105.452 cv
373.162 103.936 373.196 102.683 372.461 100.662 cv
371.797 98.2637 369.578 98.7148 369.257 100.662 cv
368.756 103.705 368.609 110.102 364.412 110.57 cv
359.168 111.158 359.955 100.992 359.948 100.937 cv
359.684 98.7109 357.105 98.416 356.295 100.479 cv
353.201 108.359 351.98 109.75 349.553 110.012 cv
347.168 110.269 344.853 108.857 343.867 106.718 cv
342.99 104.813 343.208 102.667 342.705 100.664 cv
342.705 100.659 342.705 100.653 342.705 100.647 cv
342.687 100.465 342.633 100.292 342.553 100.131 cv
342.375 98.8584 340.607 98.2686 339.752 99.7695 cv
337.996 102.851 337.555 107.376 333.32 108.197 cv
329.419 108.954 329.902 101.051 329.881 98.8848 cv
329.854 96.2803 327.767 96.5361 327.012 97.8965 cv
325.188 101.18 324.033 104.576 320.199 105.97 cv
317.996 106.771 315.121 106.55 314.926 103.779 cv
314.761 101.456 316.128 98.8496 316.9 96.7188 cv
320.252 87.4805 319.154 77.6963 321.443 68.2383 cv
322.439 64.1221 323.771 60.0527 326.502 56.7412 cv
329.105 53.5825 332.732 51.3989 336.482 49.8779 cv
340.24 48.354 344.264 47.4404 348.301 47.4194 cv
356.516 47.377 371.687 47.3027 380.286 47.4194 cv
384.417 47.4756 388.535 48.354 392.38 49.8779 cv
396.218 51.3989 399.93 53.5825 402.594 56.7412 cv
405.387 60.0527 406.752 64.1221 407.771 68.2383 cv
410.113 77.6963 408.99 87.4805 412.42 96.7188 cv
413.211 98.8496 414.609 101.456 414.441 103.779 cv
cp
0 .706233 0 0 cmyk
f
372.144 93.3867 mo
371.048 95.0078 368.312 94.7031 366.634 94.1914 cv
364.945 93.6738 363.65 93.7178 361.932 94.0361 cv
360.933 94.2217 360 94.3242 358.993 94.1689 cv
357.397 93.9258 355.109 93.1211 355.02 91.2031 cv
355.002 90.8457 354.839 89.4053 356.783 87.3945 cv
360.544 84.5088 364.217 84.4258 367.429 85.5391 cv
370.451 86.5859 374.725 89.5732 372.144 93.3867 cv
cp
.015198 .958679 .313481 0 cmyk
f
365.603 91.0039 mo
364.464 90.7754 363.34 90.9727 362.22 91.1924 cv
360.894 91.4531 358.815 92.2441 358.077 90.8887 cv
357.939 90.6367 357.723 89.5127 359.205 88.2168 cv
360.404 87.4121 362.206 86.8379 363.752 86.8184 cv
366.81 86.7813 371.106 88.6025 370.694 91.291 cv
370.429 93.0195 366.425 91.1689 365.603 91.0039 cv
cp
.303746 1 .571466 .204227 cmyk
f
406.621 67.4883 mo
405.784 64.1763 404.292 61.2031 402.07 58.6118 cv
399.982 56.1763 397.309 54.4287 394.399 53.1201 cv
392.189 52.1255 389.053 50.6323 386.643 51.4951 cv
385.082 52.0542 384.656 54.3594 386.04 55.3599 cv
389.626 57.9526 393.795 60.0151 396.657 63.4531 cv
398.442 65.5977 399.277 68.2114 400.014 70.8643 cv
400.782 73.6362 401.096 76.6382 403.293 78.6812 cv
404.53 79.832 406.922 79.248 407.494 77.6606 cv
408.645 74.4639 407.424 70.6685 406.621 67.4883 cv
cp
0 0 0 0 cmyk
f
409.949 93.7256 mo
407.516 92.1816 407.894 96.9092 408.189 98.0537 cv
408.592 99.6152 409.176 101.451 410.215 102.707 cv
411.29 104.009 413.291 103.227 413.228 101.55 cv
413.174 100.044 411.487 94.7002 409.949 93.7256 cv
cp
f
383.686 100.083 mo
383.205 98.8906 381.412 98.7646 380.894 100.01 cv
380.438 101.104 380.451 102.313 380.239 103.467 cv
380.012 104.698 379.215 105.79 379.396 107.074 cv
379.525 107.989 380.537 108.814 381.475 108.358 cv
383.951 107.153 384.644 102.459 383.686 100.083 cv
cp
f
369.288 77.1636 mo
364.018 79.5547 357.185 77.2446 355.025 72.0698 cv
353.512 68.436 353.837 63.4102 358.422 60.1841 cv
366.781 55.6343 372.379 60.4351 374.382 62.9004 cv
378.409 67.8652 374.368 74.8608 369.288 77.1636 cv
cp
379.021 62.1543 mo
375.835 55.7832 369.288 52.5439 361.383 54.126 cv
356.555 55.2598 349.083 59.1655 349.816 70.3784 cv
350.4 79.2285 360.928 84.9609 369.227 82.4141 cv
377.784 79.7793 383.218 70.5552 379.021 62.1543 cv
cp
.015198 .958679 .313481 0 cmyk
f
369.298 77.0801 mo
364.027 79.4707 357.195 77.1611 355.035 71.9863 cv
353.521 68.3525 353.848 63.3267 358.431 60.1006 cv
366.791 55.5508 372.388 60.3516 374.393 62.8169 cv
378.42 67.7817 374.379 74.7773 369.298 77.0801 cv
cp
0 0 0 0 cmyk
f
368.269 61.5425 mo
364.515 59.3364 358.029 62.3071 357.635 67.1631 cv
357.399 70.0718 359.384 72.8911 361.998 73.6763 cv
364.625 75.0259 368.073 74.457 370.285 72.1416 cv
371.752 70.6074 374.316 65.0957 368.269 61.5425 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.1
%%For: (\700\753\745\752\761\745\751 \705\743\756\760\756\742) ()
%%Title: (1311.i013.028.S.m002.c10.game monsters.eps)
%%CreationDate: 11/28/2013 1:19 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3Q<Hej')FT'Mj6+9u_!KBO9TgF+2'%5nE\!u=c:1.kU:N;(<kZTmVs:3ET`'UlSQMknm<B1A,c/"E-0H>+h_kgmqBqK]O>
%pNju$mF8.OfI?a)8q6g8a3rDBb$iYggb%D3F_a:VF3nZdJp'6-W&@iHoi1?\Z(BZ&T$o@3e;']#D>][A<f<eIH7#t6T+id*T[7B&
%MOfuqf!s*iiJ6<tkp[MNhmqQ+fr\-#;:+RS8n`$_?cqbcGS-Qh4f,4*nu'C`][H5TMOdA7roF0,B6G:5r?u=pjTc]"Slqp4;u,@Q
%fWB=-g/P6lII0-f@>IFQ=&$'/q'd\fWTc84;:Bkh6hjg7nc)q)X5EF&8=:o"juGEB@h(je3*OJ1l"<@HTO4)e/^(dt!:`%I264\k
%^aQNH/PWa<s2=pC3tiM8\%7^QNRXuk3GI5@\Xk0u>%u5XI=%=kITD'8el0nH@QA*NKP"DYUWS&lEL)RfCT@37>7FbSlBMj19a:.l
%&c7Q.:^u1SnNsY)fT#9]s/gSe(L-&gLM3tjm/dga.8L>$HeGOg'n6B04C(\PWYs<I)fL"qX#^9$Q(U\C0b#_rH#AEdg\4XXiC=aO
%c%c>hGW;o8j;\^S^1pZn/+n&@[g513UM+bI<@RZ5e2:-qr/6>(Ha/(un/o&9g39G.eAJ-K`^t&47dO<)rs2PAf?:]o%1$Y-cRdIg
%SJ\$R3*3lgrnu[ILi-/YKc<cn2X#]a*<Z?;a%Q6Q4#s6_l,T>qUYFS+T/HWG@l[J*S-GsF@cr>F2Q2ts%oTE%r_1EYe@J`W))e@M
%Q0*]j6P:N26)fL7Ueck07H9Hn&Gmou<(F]<Vi>Gf?&Q^_[m],;%/#ouD7#,-bGeR@hrtXiJ0e+Y\5b'l0^8&):EhImhlZaU\q%<@
%D-s*!)i\SC%+7H?'LA457%Tg88YXMJ-D2HYGOSkB>-4=(MTq&OC"W2JIZGfonSFA&M:YrtD^>=Grd0D"-6hag@r9kUqgXL#\GF-#
%bnC`KG.Bs;1I<LKm;qo$YuA5)m8Znc`E"9U,_nqDPN`[S*,aT8rsYoeAdgh"9<heu]dpO[M7-A8er-Y]4g:SA.$F'?&>%Z8ITV^(
%=f"ln2KdNOFFkQn2JPt=B;qYa@M@#M=bub;NGG/JJqtq-e^Znacr8VD>X@_`MWG30QhAl!RsMbM,Ct'ARSj?L1TZinQYcKD5<f&A
%a6'"DA?u6X-Pq5F`8&-))&P)XmEbLaLISr)7\@Q-:KAG1dBd?gi87U"`fQ6AjC;KkOL^^cq``<@`uXr"I365m_^M5k"^1g(bJc[@
%kd)<,'Z/1gIlq/.nMC45kI6G<r<JtMn.1L<fTmWVfcK`6i'S_)qEGj7kXQ`c0s5oJN(J,.p3j#nO59PMqEAfSa-.$n.,X%"NW3pq
%%#At=6o48Gqt\i6UqQW]5PU35+-"qMh^"Xb7$.RNR$@.KUFD0V4GqFed+:hBlD#jJE>2](Z-RBH@S-uA`\f)jbj0[j7/:GSpt/Y3
%cG1h,5L1XE_8#fp,Gj7OHf@&`5'chSk"e9,T#MimT0N@KIiJ;?q.&s8k)VkOR1B61!X(2Gki_/nVp@8N$=:R#kX-Tk\o5s9UlRqd
%Rm%=1R-GpM$n3bM;N.=U,Jpmkn0q8O=89oe*@j0K=$"W)3m1O7.)VKC1eT!ijn,'/+#@Qkm$s7aDPkB_q@'?s>V;Z'c5#nR?I'R9
%1N2CB]L+sULq#5t6nY+XDs%M_g:"_4Cn'21[_;&^c02.'PAH.O)_LHeL?;Y"[QBqO=Z1]5IEcs"^R!tAQ:$CgCSs>?Tg!]255WGZ
%+3V)IPA=q>rQq=Rj-fg61CO?t"&5\BHHOf:\e^nanKXDES*ubuTuf5J:7uCnj3cVP6D`C%fOlf4Sm&&,hXBpHCm5&$T!+@iU+*O"
%:&&EI[JY6N>,NHDai\O%::m'ir?/L7*AafuENi7'U/ESPJi`W[;JWmTK18)b?_(OXK^$Ngg?m=@eCkKD>!MKEoWqZeWa:0Tb+4G&
%h-fPh03Wnk[kcL'\Hj\J(S(]@#s7"nG*6\(mf`O_Hb-]U/&<!Mh:rc$]-j"]o:gK(:Yn^?S7"#6FAnZCE+CSeY*cl"1R;;dRng2u
%^>:B^[PD\TZ.!Q\G,mpB'MO7A4>d^%dGQshTmGat;sBN98atAUg>!5'N[2^6l[<7e-EYsb2g/A@#DH4JUJ#8p,&db_hpgeIaZHPI
%CTg@$im1"0Mg)n74b:9nDlXV[]@A013p`51fSj"?5&SW/Kk,-b8SH&n4<F&lN0Hq_'LDFA3:sd2l8i[%>GY^tdLJilP\<EC\"Acj
%N,><:$sLVFUQo4;]rj<<0-$6qF.>Dp]DSO+Yd#s/!GhMh/@Da%jecoO$Wh5W[P057S@*=tr\n)mZW<44h<N0QV7gj1B#9s/&7q8,
%?S6oV=nm"F?Z+iG/UY*_0DE6Lb?=Gtb9bldbkQ4Z`Z05EaYkmPr`hAV),uYLMWMibs)s!3(B#9$R-`nZJ\Ffc0t07+I.4JZLQE-/
%3UuMr[BJ%oGEetn@B4[OfPS)J`Hl_"m\\`V:-`^Y,SIA0K-E#fC!?bCQ]l+8ndVVO`n=KVk`"JT)<UTn]XO<ing^_2*:50EH.]ka
%7f+ccHKJ9d8Sh5r].'1A:^PP;[a'c,i2BUK[\:G'$aKDTg'3RL^?Ua<S,]6G\=l#j!fEaYGH8^6p>=+a4fBa]f%!9.CkKk(QYY+*
%S`7'Nf6_$t*=a'Q:I#!1mLAJcU2<T75>4h#U2BfU_)D:6j#4nCUJgRI,mt'^r4Z_^.9>8'G/Hul4kGW#9RULqYp,`bPMgZI"K!+q
%Zf^ja0?Z(e&g2`GF(lsd#!1QSBdHSmQ_P`0I=&21J3@L0$7E[1.(\`^LOO;kR("&VYuU$ne:LGYc-2DYWE)'-$ckFjcO'@oM%I0R
%k!qGWU(_pF8FL[(aA!k#5A6SmJE0C-43<2qI,a1qY$t8io5Da#I8T)^C,\(Xj^T[jc*W6`';8sZK:84aP?ak[c*i5^57%sFMfTj/
%E,HmlP]GIiXeui&hT!Mih'?)345R'24>2t2jU1F)Shgm;!FfXmk.9G`2(roUErmXFKl0GE@i,S.2J#"V&7/;X.LY5.ho3Z!>^3Y;
%(Ic#Y+LI;.e#Y;!$s19jiPG<<"Eqr;bH&0;h4I659Y2FrP1[Z.H::,Oo'r-[U*,:pQo2i=itiE"N[clS,tXXuh+W;-cWnQP"SC2=
%HJ[b<&%X%=b08AEA.g/[EYl]@4fBD*<IQl/P$HM%7rE'kLC#_hfAGK97rDG`j=BV0[9*e*;SE$<F!am^X[p>U8@?]qVpg!jAa7E>
%^$k:J%J/0s[TqJT`['S,>hYOcnsOZ<RfjD2Al6ap<lYN'l'?7c$!at(kDgf=54.-fjM9tQ?<WMB_L<<Q:E-d6,qMMHX&Q.A.X%gN
%LY-)/YMu`_(-k*)42k5elq5Tng/>U]:Oo!FWRS%ma5g.YH]!$]0tT(>Q;3)(6m>P%];_p>!d6"*+K8VKi,.%::_\&cWEge]Oe"rS
%pS)Y[HUpD4jWlcI8["W;7KOSLVm::4Qb<=>Ut4FQMJ\?Z<hksK"`_#@g./PK%uLZ'c]j=;dXEF_)2MDH)tbb>oh$fuJm%nT/!tsI
%fh-<_M;g*:;5V2r90u@Z(;<mMU.eL5[^;u$)&LPbJkD7q)J.V+fj);f0Zh:S1KTKt6nliRlC%0GPgV\DU*NVrdpJ"g(K*8ER6Mq(
%-qRNN;2_`Y79S-7>Rsj+?&PHW&(I><k+NP:Ol\Cdg,96aB$I'AoidU.4Og)N@e"0qNd7`q8O?jl`qB@DQ=^nJC(a*tCG=O<ic;I\
%cV%51\A6&Lh,Z6lM"n*Q\B,K0ebt2ih30tY7<7rP#>o,2IjGDec,qUuo6)SVn%LO>7Kr,NDOFYK[HkmkB-Gk>J7'PP(3478f4I@P
%D7?HT@BM3+[:pCl!Jkh@eJ;'MH;\TgX=]C=KiD8I[<[mLnVki:^Kbb4Mo%%H#l_$\baD''0%fCaCud5$-ijShCp[TF5rLd&r#J`I
%Wl8<mo5GW>^]#"?RlSZqV<e>-Qa52[7&?6T^,%8=>!]8Fnihn5]=^R.ko5ACdV\iiQD/jekWA`eK76A9;8qq^P*uMb$]@Ym(73Mr
%&/e%n1]o\L<9iT'XAU/=cJ^slcjYf&I%j?SqVK`Q-7S$/^U^5t`18QF[l<2'^.b#1FIMP2f$eNlce#c9rsSi&'GK7$EZ+mnUg9ks
%=F!642XPNmj9#@8jO)5Bph80GNAfI.YI^JGI"hej0&58V8q@+"^<9A"1i['!duAXI$2-&&Vpr0\CM$8.WL(RqE&*=EqJ`1TMVOYH
%]i&ZH3Z#2sP=40OXFBt>GQ(==Cec/[/rf[(P-^O3\0cVV:AQP;qFsEXG91Y2>i^ANq;6J=s"]=k!B.<EK\0VlHuEmqMk'5[kI\h2
%/onZn[Pn.Gho/e`-@gQ6ZQmq:cnBFRMk'6176G0GkF:DHYBIBt7X!0Vd]9GG]&+44Pq-K[h'B0=R<nB]-TUP3#aq)gr3)bsD>Z8:
%6e0?T7>Eq*Q>jHOJrL4'E+?%<!lmU2RVUEp]ria!g6F%_G]uJ_8HiI.mt?"$g=3rD7EC-J2pPVn:u<BM)JkKK=ZLD:r2_`T6"cr-
%PW'M_@XVdq?kGG(K[(@,ZUA84/jj8mnj;+l%\4oOXVUH57JuLr@)Y^!EXSo>=2I3sXRD.*4>4OBMZ9[*\t)^%L[8NCYicINC%<!^
%2YJ7FDR;;J0Ab$H&mI.`pA2GAN92D6dV]7812U71Xg\4`9[$@b]"&*S,iL2+fBp>Bj:EUE[Tn7A`\s2LYCrsi7PsAp,E'@\bm.QS
%Qph'0.LO)`QUThD&U7F]?5A*Y7Gq_hGZb/U(4hhP$h;J-C4?g\=p0qi\WA&tnB>tWC#4k.?Rt+kp$nff]5?Q:#K1LX1<oN('1je[
%=Bma=7FcZ>+H;R)P+VH+-Ka\)(it&Q7((H'-rrgWWb4'8P!ko?Y?`n<[=W4g*2h#0S,idR%lZ3hQb*X]GgeWUgqYc(b&J3gmFS#U
%`U-<VgQuf89Ja:.7i0-bj0-G&GQ,_79=$%7k3G!RJfDTCa4[@;Qosu\fb;"HZCKiIV;,dr8SdTO57&f/.=aT]r-a2)lg1\nFMJ?f
%TU\h(cPk-Ei][8oq>gNu]CY7q9H.SmA,9\YOL"B&B#-j`/T#2WL&P($-`VAgrGG6bl"6+'>Qi0kTV@H*[@L=R:9^977`Z%m+NZO(
%`2L@8S$j-R=Bm#_Lh"Z%2rcIK(c17%b^:DJ>Jr7nL%CM$@M-YjH(JB]0c"bfBuA.=Nj4CMbX`]U*a5J/W!I+rT?W"<G1J./3lUC-
%7O:X^^H=Fe0[]AKZDGu3";g?_UJ@Xa)AOjjF#_S9\5H%C5=T#K)oL%;>]4a@os<lc\+Q7,gHhMJr9+@X;A)cBT`7aR/]g.=oks.3
%M2n3ba=c=pRcVETEd+BTm*F3N6]4$MOsoF+\8u:H0<3FJ$!u63Bd>F')E5-``GI[M7)Fr@[ZeXsR/P3O'%p8tX[Xn!?K,i][?JS;
%6,,/@&fc+"Vqii-_CPoqkNDQ&6sfVpqfKUEdZ^./eR%^+f-4%[`'^,oK!.S3R@/Z1,b(4mEj$`mR/UQuSr,]LF[Ntr`FKbkK`j[+
%9JXe'/Y+TIOa&I[c#4:X6-[^!"gPmMo2i?+nE$h:\XW6QOqHBaRp1,Y$ZBqAbtWa>[.*5W]A?coRrRE3c%@r6LZMrcma!2hE+)5l
%\HFuu\8r%%DW/kmgpr,#pV6+@g%4:M-/-Se\9"_I*&r&^2DP._h7H.OI,6>"OfSq?DBA_dKVu)Q*S9oV@Z1Gmc/N&dWGuigra(H$
%\3ohn,R5)$IEmu]>?m7E"iBT_\KKpEK$dRR=63H"l_i9Bl#J!p9oWbi<9a<a:DEbDGCEPU7&a2$S"dlTDcE<S&Y3k_Zc5H<&Dg*$
%;4DL^bKU?=rNf^HVESO[Pl%B7.[[iWaSmi[#daKD]EGVKm;D6k=:1'\`FP9"?h^%a]]:_YST^Da-QZ&mKZqYUc2P:FFDSOghE&D4
%:.rS#2>Fs]m4Z;`1CC+l7_RV,NdS*>T>N_b`"_Z8#V;t1lg(*<-V^'g@+(O"$_a'n=7QJoqC?!)37diD#hD\BX,I"We@LM-Zr,-g
%2P9OT('K!+'!a%&F!3*&p6>2T=E@DOc-;(SFKLlR0C5?GZ%E\QOq=tSIlA>>+H[slooU[]Ku1f8_pZ0na=J9!$_(g<'E.CQ6q<,i
%BA+c&[fYZ,=V4SN'?sh,qmRMiMdZ9D783geGWG'SPrLPGl))NPaW<q5p&"Gjh:s'7#Nr!l)CI5101Y^"_hW\^H^M8Dd:00)\Yo[g
%?Hb*%\trTp*#'nJh60t?*[Hk\8VFmUYu$Iq?'$Y&j-85X1S>kSi+1OVA9,5md#HM8URBMh8OW.LRVnY7#kHtdK@=T-r#W[<48ATQ
%X-cJ9=PVjk>Bfkdf.5>5q1@;1Hqi>5bBmh\fK\C4'@hss>_7;3AjV7<.8>5FI>_8Un!:^8iNBEF/9'1ibOlm%\ilqODMFtjT8hSI
%a(s-U-K`L%R+Jr)k5,S?bhnPfR_Wa1qR\&&?\%9NE&%rj9YC3D3'fUCQV@;joZTSGl5Jg=e;Jmg/$MAj!>K`?Qa["AFqMR`E&71"
%UF1?!mS)?`EC;*4n2Y8h2"LqE4D>qbgAA4L<N*9B0`EeD)"&)6P@/S]U6A%r6#</Pr&/9aZ*3m299V]O?94TJ0euNmQ?H21C>R'K
%B0g,g9kO8"$a]2Z(5K,PK-S^_X^\tlQK1aI;b6N34u>"e;31%rBiAqnc=Pp$W:"7LksafG(j<FM/Q8c(4IgmnYDX%:hc""[RoXLQ
%QQRkkG'31_]3^M(L;[peRSI0Il3B-Q?h^k+g9\V@V&oZucTb_os7%nZr0D&>Nc8!@RgA+E^%#0prrTSZJ"hW4M;Q%oSmKkAR@'!a
%[:V:P3bbQppm6@\nb"U6>>MrJf<?[dr@e*ASA'EL[_G_OQJ,,_qP'h/J'sC5JA.V$?`#9^!#Z?*K?D4M@uHnjl[rY(k]?l/cG?JR
%JC!ea6i+LPBlV4VG";/5Z/>QC5Q<\kp$HVl*FJ.HDqDN_Mqc0Mqf;*ZD2eJi5l\KAXD=:$i?6lZFL8F@iFn9Qf8#]nOHD0qO<fW%
%q8]7;[F7S[6iDLS1*($K21o(S^/=1HaJR2u4%3mK=UQ062YaUSkYacA+qOKp[!\XoObEUM%J)6t1.i*0SW$Po9..pWlKse-`E%=q
%U)'HJpgKmu(9OIis6%UYlEjI0/"J#R!`EA,ku#fQaY69dY'B]+WRu$Xr5^-&XYre<_8H_MGU6eMJ!2;[msl7UX-ZSEiOXUp6mBoI
%K&%A9rq1u^qTn53!I^kuaKa&h\(tcJVEk(X<YA\V(L_2ILQ\<%:9"7&^,_WeU@[8Kc[<!<qs:L8T^Nb[jR$]Y1d>I)ZF/39@8O%c
%fl<aQcgi!#YFhAFSL&Ur/MA=A0%ufPS)N'7pGT:b<9Bg9*Ncomj=O(W@HIakRZ]7bW6$q9j7[QJk`ArP(S#VS[4:@'")to?Wt.pa
%"i6p1@ZLA(gODpicAQoAr*XlLctLsePE3@Tn$>VD(u)Zp0]LodJcW5%5PK$!;f&!0*AXH&ctVt2'5d@+6ZWu-\5V>c-(tjdF=.q"
%EjU;2`OenRI7t4I\9U8:,>jV_"6/.7AVUpu5eXFP4Y6:k0I+1<C8X@C2jZU>2'A_.D=kt,;mFrr9"iX=<,.]u,`HrdH;DT\[#%]X
%8%2U&FHY<d;;\A*ggi`g[Mn>2T\ZdK9Lbh+rMRXFRqQF3G@Muu)LEs"UtC]kDc='Jp=WeOZ&W#7.@,m_;$Y7HZP``B]U1clQ-Dt?
%PHitmAnYdXf2GOQOKdSYVY5o?o5=(\80'OUh55M6Z#.sM*qE7K<p-heCm@rs.[60h3pj&o2Cu`bh:G2[G_dIsZ#_GD!u':*NNUl:
%6>USO@sVb:2hYG==T;N?+-Fhe</D%A!tpATlXu;?%fYml[`aq2n[&qX!Ki_`;f/$?X+s!I>A].NEFLh7[Mf;1j$rWWN"Gi84@DGH
%o[!#gL]30J^Zp!2h+m7>f^8ko,mR>'6+^"]G(qOPO6d,=Mb+HOaE&3''rnLnl9S'ne4IW"H2:(%%&c(+kb)t&=`!%d+i8,nS8.fF
%U%QdkVjbRO:"QPt]%(9i`aU>(q'B%7m1_V_d6PKMbjiA"l]'>(K:mJGC.,^U7B)c=5uDN#dQJf4-JDk;5LTpih(4l8K/;,:mE7e9
%CH!3'_1#p3`'Vb;h,L9+Bgc&27P41'KC67PCZmpi3\%d84ZhNX94a$X95M+E:;q)>39H"hh6!rH.7W8nIIbaaUJA'M"Kg&RDq]a\
%37EmN*='Ba_0ZN-3&H@a'g@71F%8_,+5O&cWa2q)hX;PFH:%(MJkLSi\lS0nhGrk&`aA,l!/PjS0:&c`U;9TClBT*h+VXaddO1jq
%`lU*,^TIW_\H:F(m09t67`eO%oW1nA'DqI/H$nBg!i+TsiT0_FbRm0YW<,(L]hNHGGNtPpC[/7'l(R%>Y5+a`:EMFnl%=/Xac\g=
%:;sS99Ud>tbd_*t,^=3gE(7$J'`J<`=8WAVRC"t;iBsnA/HgoRXiDVP\^j\&(^K;G_IK?SAAVhopt56Tl2@sA7aU1KVag4$KZBT5
%Zo+:1L6>!>gE^NehX3Oi%5)=Y8397MEt:.EJ/YYp.\oW!+#StQT[eK1ZoU$B2>Ip3)PhNqohP.<2XVHc[d4B1lf1s,dOkZo=q!B#
%[F\/`O'M?Si`CaXX-0#if:&7;\Y*+HNeICENq;_$$%3T8)312=FhiI2GoTKI-0W(p.)i="NM4#jIuG>CnI>Y?_i#+27&#Z?:YcOr
%`G26+%N/i]%P\d-e6->SP,VQce:U`4dqW+l6`/D)=RT_4;b<*3=1h.tIV;<*MI0#0.CBui%&sV8clq!dZp_UKa?Ldu2Zo5s5D'u^
%WDD0]f`&M3k=NZ5N%?@9i\&6<_;L:]NYQl:`lSg\Z>u.5UE"Qm\sq:!nNt+9b\j+YXbI*,DM7%<^Q(-dqr:C@61nBc6]Zk;WfRm2
%mP$aa(%nG8#-H^/?f1YIa/Fd0e5pi0#C_SjnC=-6'JaOIodfUpJn#Bn!elmXW(QoU4Pk/5>l-!&p-$h4rQiL0T[cH8E/t),2l0!E
%*0c5o/%,)VdHUZooR6IIjWTURq5.pt'dh0@%_1't)m4U-S>K(4SQZW;)W@1*q_ui:Qg%E[BB/>0/XbUi/fW3Q<bu'MYOpG%/>n!m
%DEFM>1FogSN8?q$Q4@o_kZgL[m]c4k>t_S4QNNCiTI4/+W'p!Zr$HiV:;%$18R%?-/>kZb+2*#DnG,B8BDgiJQ.b0-Kb6tXoltNP
%5co(-SX'o)ao.+iH6]<CY2Y+]L%O.A#?g<EXd:C-$0kpGaDLa[+-\;3=tG'kAH[hgDPgpK[:/)oO%-J2S^aDtEK!e*Hk5EC<X6=J
%`%ZR9:C)pd4W8GU%NSD7j/5m_@i@_D7s$o/_P=fsa$A8-Q*.8Q]P#!L*(hnZ+dWMR6G;)=B:pJ&E9N,FM]t0V_1WE$HAP@qn\#3_
%*Ng(uhl52f9M/R,%I7+,cAS6"^1F75C6R/#TFJ@j@eK[H_j)ieohN*S4`-87*r;,%c.6%XWd0'$?VH\0ON4JjopDD!VpS2p\OuQd
%E_Y!I[ppe.n#[j$kPg_Tf/XfV4Y=+^Os<#r@Y^s1okfkHY11c9O][R55T?^V)V&T<.XXeB2Vt^pWM[io()nC4?jq6U`H/4]<A?@#
%JRDkC@SA>6l.[bAii;\4lYVq8N[gL#f5i?jS#q.!30[.:PF=GK!MP#PoQ'6h="<)O-?"mZ"WiZjb4b500pL1d?b@f;Zh1U`WafCm
%Vk8-&NlZ4T38n%TImW<>9A#h!ETfBsH((527]onjpK;B$H*/t0M:'!hJk=`Mh&>S<bXn!.p:G'LTc</O`cM9SP_4/@]KV1_,E=7^
%`HG#)2f8j1?":9"fau)8'C7$(':L$(oSk_uWGCS5SFWZ*0qDP1FJDhZ+!_>f@7CEHnj3<G:dhcKZD9)kXoF@!0i*1g*`#k;;g>62
%+)Z:q)dg2mNAe'%cO!fhQ^ZIQY;&@73gJu?[6-Km.b27tfSEfG_Q(Re!cY)uj#4\fWo&%Cfr^7lfi[P#DFC4i8gd2+&`7T:8G>``
%YOj/%NmPq!KGif9:/q%k87HI)WF]Ol<$pt!lAmqnd/^fANZV7"%]Tb"lRXIWRI=Qb=#X$Fh:,3#=9draMY48Io+&1hqk)S0,Uq3*
%V`<@Xjf/6io[NTNdIelN`tHTS.DRWrqKoNR=q/s+j)#>i&b[K4I6LEYTeELE^+AEn?7dqO>O;Ek*>]h`fCidP8^ahl3MBfiXbjZ@
%*>m[*5IipqSF2Q&(alaujB!MfeR5>t[0O<7$@;*A7)-#PUL.b$'rX6T\Xas,*VIBMYP.!1D,(8^%f:ikrP;QWc62JBl1_M3":V#]
%P1;JspP]7npIGWG)/_RPqYH/*(O&L\/lWYb,A?U('7eU`iM\\]U!-K4cJ_TB:JZK'bM_!7'RBlf'5*cYT\(.m[%lX,@%Y[2$>hOS
%_"RdR:0FQ'<neYSoj6m*a@3`6b7q+!(sYDG@-Ft#X@GJMEi.VO%8mH,Jq=TA(Fo.tI4#RDU;Wq.=7T90P-4,k"7:NmL6XG%L@(&e
%OnlMQXb8CM*9D?f4ZcGY.J#tS9@hQnpHCaoI/!F87e-H"F7\7hea-=PVfo=o?GH0GE,0%\I]cRB\*l@rSo$Q5f!jN&4P@38Y4$eQ
%^VA=aQJB?cZ0s:/Q?>^HgA145o+gZ\f#H>6_l_1KAp^TW_H<RI[Pmhs[DH7r45'4<YP5I`Xl(U/H2OJ&:T*ZR?^Y]5r.-2:o7a#`
%pZ#!rs8>UAqRF,"WAXD'6j]EB7o,X:h*Tu0q_%cZHN,![P<[NfT+2n/Y3V^jDdS"jS2nlkhi=9chJ`A9f&gQ&bLUu$?$hfC=m?cg
%GKOPT%E#79mGq8+J+hupS#pR.hliY`006WOpS6RMO`1!b-%57&f&kHYmpmPEF?B6ir+gr!h><>l/aqQ=Y'T!oAr]p\e7B6\MrcQc
%j*tEb<8&tXYEs;Hf#bpDB$%^[./S&HgS:n+rATF8d!b]MmINCU)l6I&'&P1"[a4Y"A85CS/%Vk*h/DVEYKtDFlI+/YX0"ma]:$@-
%HU"`c#?r.n02.hSfm*C*.oS+WY<@3E^TlqP5!Q3[mTTM3bd:!SqP25V4W:VjJ)5WIOE9jqmQ4>tY?,a[77+;os*/g3--0-CK:;/c
%_qrgBDKk]t]Bp?j`_A;ch+u=e-Z6*Wp!MpVnu$WjoZe6opITdi[e.L`GR%pXjLfP?f)_m!fujWGWZog!jZQ?<Eb@VO<nt>h\Fo&q
%$e%*1i@Bu+?"b/Do_,H,Ilr$TfMp`dheg,irje<]D_ddO_:U%@I]kn\nmm*da?Mh;X9O"FG]TYXrT.,#B!c"cmo@pKVkIGMkKspV
%oTl.'5<_K=^u@9L<]5HEi6DSpVj?r%q-M2`kJ'7(T<5g%Z!Ap;^RK@@hn7fnQ9TYX3PHna1'`"rqjCs3":8Vo0-BW/6fjB`n%V$Q
%7Sj`WmA&79QbCeZC:a'h7,!Dcrp4=1bTNa%M[pjl\[1g$Y_8-QRdCdedG(bqrcqqQe[g!8Xma#Ob#n6$9$8@d5$WAtD>7HCU"R3R
%39W_+$$%a79saBREHesTYNf9X\\1c<g<hB*ckGTLZ*eT,\Xba0hW\@#jo@;LTF\=-^3'g#a,k""dZr$!W4Ib5:ftH`I#tsZ%R4j'
%C7>b*6*%Df"UC)IU6Q!P,&lo9A58`^9QQ](h[3cE([:kcGIONHJ7-nhqGDU%H1a&,?c\d$pGDifBt9<Uf06Da*J0';Ct3h/XuEl>
%fmEWOqs=+'j+0YG1pi;$<IX+O.A44XDaN*Dg=c>7`ms_lp++P"Q-N.rp8RLFg9=ln^gprah)NSXg(fB3kN\rIj2%;BB>&_1"RGes
%`7'JP5\0bQ*^B]"4Il*B1W_J;IU1ZS\C3Gef.okRT'+]TO-^50^tJ[!:?Hf9EPD,>Gdgf-p0PM3Bf7&IgRf^H1q-O)09*h3BDjt:
%^?]^(/q;XaB4+3.(.CpSqfI=KAEDkKRDWe2@D(L`i\M4$pFZ./iaFn>iknWaVMRn:Yf"T6Z$Yq>DXYWNhPW[]hTMO&mXOV&$&=5O
%ab*e6]Fbdlomg/f4rsDU,QW"sm*e)%`ugIJh.^]/*1%][+CDl.(4Ui.d?DV2ahMGJ<jq;(9'(15S%FA,a8$N)Suibd\*XFu/+;Wu
%@9r^Omr'dhX3\11nF`d$W35m%o$H*:Hb/>\4PN*M:VXWcR.kLSh)6>0rL22ZEdM$cp4Oi"J#igOlVI2=jkS=`m0QM9s,_?a2Z/ts
%KZrtMr24VCB=u6fO88<ZL)epQ1/qk,[G]c>q*X3'@riSp2BedA+"d;%Xt4n4ljY5h@)Dmt[\DkJM4WAX/m-C"YDF'Hh9\D)=U]I'
%HcE>kTOY?Gn7]LLG`4p:@F;u)jZc,*@E>3mJFZ&Hpm!f/Zj0=iN7A4WlfT4j,9Rs\8>BlWj1FPanB"f1-:YuT->8hKAB7,g=)W'7
%#_T-!,*."V]g$e@B^2/F,&!EoKK^8CG[o,FMrns*^1>gOT8M'OP",T-5j,go?Ti]QUg1<sOmmZJHY!Zo+nE.PCNP"_%'B[`9@H::
%Hp"X^#V><?@m'-c:9O=Bs#MiLLmoFf`os91[82+ebFJZmbRg)nLmE8sM%Ln2[@768P/g9(mar`'&e.2K,QLq9K0L5#%=*",O'[ka
%)(,c)S'_YWb!X4u+2$TOJq@[>Y4FQ"7cO?XW>)%uWFl^ec<l[Lq4]mB5;L8t?doHf\pd6"ln%Oo&6S:1-YBW*?S?73:--E+[l1UG
%>E?5M^4-p`[ahuE)^ArD%(]=+INW>!%:[hK<dka(hK5A0RMT,i51tT"5)jZngl7AAKoC;&pGmR,rEFTdmK62D24eUOp?KegQ%/>r
%LD?F.HP0j!lUPkK8"JJip7o=/jo/VfKe7eR)>Y>.%smZ3bcq!/pdaIH/pkC"NO$-1IBXkR("QOf?=Ob,]2<lqQuP>T5Kl?14o@3S
%J;jHnbAQI]]@X9\e_8k2?1,(,"YF:!mQ"EJje("aCQT\,>)`2+f]3<D$]O5ZDnZ?-nn5/\7r+BB:Lm@As2^$ODAouKNVA`.\k4eR
%gfs%U.Q/Z7q"r:96N6koP?d4]ZaOjS><4.\pRt>iH1K4&&'GE`DRF+8.1>mKqP?+b#[33G?]Kp50FAd^ae,b#GUbM^2P5@A"7F_<
%gr6$!\[BSDa6O(>rLiFs<A'.)dtOC&%%.mO_ne,u!R5B96'PeRBOB/#CaGj(NdFQTgj=Efn>lu;UZW]jqZa=%qNo$V*,V\QW:938
%M4`]$i1?(_^27Q'NjV)2md"'f4qIEBMUJrNM8-aLT=oNW6W1OX2]e3mKb`:3KhCi'Lje*lG<(PqgqqYr&+:4@leQL!P$dfI'%gI"
%]Cs?f97,!kY7J'T2]lcf<?Rt3@4CgEjjDgLr]rRBTh"^6H^]<74[%0c?CWp#T(HE0_YA?^guL(OhcbO%AEW#!UouFc6=]j\p2^0F
%)?'kR4m$$?<9@uidWg/?pHoWKd+6CJWWo$b&chsaMi5A"*&@E+4gd&<?H/DCR=>+ul.b3YE/%kHCZEBhgZ2gMh!-!Z<T[tmr1.fu
%\7KKi\`GUg(^Z7i]1)e;46%D*e"0mQ]8UJ(22PG(k%g+!3,WZ,2"f>"NApU\Z(ROo=)W#IFUu3!No(O8cj]5?XmgVZUua^CNF_]i
%VuuRsC8#W*MJi'blZ("cn^.uTZ.TqH*7)`qiFMB<:T`Pg+reR'!]E4I5o1R^<&Y/0qkN]FabMM[Y7?sC)A!j30?2#b]org..<+ms
%H/?fD&'M"XlS$"[7QTkf\Qu/s<&B_.E4,M:;9?#Thq/9%H9YND#ek`i8D@m%48HohSA'>d6h;8Mg8cStCOP?d9.Tn>COROJ+1AX#
%4`ntY.]c-g+=QF@SKH_>qR[i7NO*8qk?I9@$h9oYIZ'-QT-=aS/\\dd_0O%Qa7Qq-W\'Drh^K-I5AoP7k,UYR0q:=PefD+8q%q*K
%[sR_YDl\6*V"pV=h*06O?h.jMGm&r4<uUtlN4kMPZs>_k4rCMu<&F2ol&qjCJ(nhD]mQ;0hV/)rqQ!\a^U_#->4oLqK>Y)Ml]n[1
%).EL"6f9;'on\'C]LI"LpQ3UbcYj.<)]*:BZPlVge-OOd\$g`J/Hrg0J?Nk14)LReok/2E<#_MKG1uKB+01+WLAtZ>2uRi:fBA2+
%WE_"Nj_D5-e'<b_/jDBmemEjXg1^?Ze]k(BN#V'IHES7u8+tpplfI^%O/lPMY3%VAj8D:sE%Wreq4aI_H?VKr=SYhI>(?4Vb".Eu
%Rk(kafo=%KpRd7eo)"imj/jD)$04iC=*_I9hHDQ`'qM8JqjlNcgtS`hg$"+c`nd_\536u]LBguJS^G!"rNCE_OYY<j(RC[Xh=I7e
%/p*>/X:UdHEdQb]]XXFkbFd\f@_(gLFH2<Ub/<(4@LckSZ_.?Qqm?1Wma;DtHuo1,m:3K[/=3bia7o!C'i+2P4/*`ZqRle"H`+ej
%bGucAl"lu(+"l#!lhcae:RU8'HaiiBk36b?m[ac#.GEDfOW=ArGm'Bp]2Qd^^6%`l[>X6V+hr&67q"kiYCDtn50g\;iONlTbLU?r
%=`%[ck_14.W<]KsQ/fr%,<tSjmF07\bpQ5]M6b[CG&PG=62'kukBYYTE;Rnda.KL2M>!t9^V3R2e":oSbMANGSnp@F%-VLbTHBdN
%5Y<!(brauPI.VbqXR"`FQ\>Yd%Q^!o+7sSif#KFMQLj4,^XAJ=TX?A8d!p1`hNPr'OrN:2lkmo8\IT:eO'X`YkKj(hebn[Lb*'O6
%XgM<Q<9q"RL,qRV+9<_jf3d[k53H:cfN](/c?OcE>1hEPQ4*#H_qQ>8h^t$93*pYI(G\dlc;N-:mhVrs=%#pYhuQ.,b97"(3r`[`
%2?I.dS@#iT4nqk+dQ/b/q"e^`f#&5nr7j5Ua>\p-b\tF\:VGDjk/69cideV\maj/k[C%iQ_GbF+-nOi<1B,8UQZif4KDhR^;UZgM
%o.E#[1:&()*`FQSLq`QK/kuO]gnQsA%/od6CNDB3@/)SBF`.LNk0MOmgUt[FG:k]&Eq[cOEr5J:A;WPV0<MqYOc_mK]_Z(/1e2mq
%j2'F=cnY1icc^:/?Xt&kY9(\hX)T]6e/p])@i6DHgOJ2k!q9d^Maok$GF!EdGXOBTh,rjc?Ju9S^t)f":H6nH2RKfuT2355fSgF2
%'5+.=Gkb[c+m[3Q,#;^LauRY)^b<B$Gs(9cS+p=MZ&5GK@:SDBcd0?uBlR/0/>!ZC?gRQ-9Jaf)rd4r8<&7%Bbqj>f%HmG1[W^F&
%*]'ItSi)!cm+KiH4O#s/Zfl;>IW^`4lFo!U.N#d_hlTo4UrTbu>%6#2I+r$!7p?/#ei+3)b3bPimL7-]BP;X>A$*+dg3C%eU#5CR
%G@.e:hf`pNCQIo&FEU&d0q77gbP-\X8urM1@'gaQ?J-hCbh3:Go%Co&A<-,mN0H.,e*jF9mgJm$bogeEZfDIU6QU=)\P$em,B91/
%Y%GFu5M4-IQ="k,c^0t+aJ\Gujsa4\f%=HcmbHR1'i+]Il.$r#mG9PW<`ur74(V7G9'5fa'@N;FRN<9jcat37pX@FM!*b,g+g\"e
%]`.KfBt*U!X&/tqR8Il$A"925#MGJ&!65HmQF+h2Uat:TkKiQRml6jSS]?GJC3m"3R`a6IF2CKFTtC<sd1J-+Ns9T65,ar],Zr$E
%FoQp.fAF8DbBQ,9%dFVHd+^.dheGB#Ilm\iq3N3!@.W^O*n%tOph#ZB5&6<,q7PjkT>%n'oPm"ZPP=b:=lH1JA[Sab5</)WkW-j?
%9%\fG_Z=K;Xjmf?-=#6Wq</iKhEF*J]ZZr%pF69./.uEcr/)2tLb+7GD+4c1+-=Xh?$tB(;90_n2:qTWh*ulNd;aX!raEO*.ph?[
%<n9n2VR[^`IluKAN^B2ijbS0]VuU+'b]p2QgPD<bYQPW4*IMsi^HGdOjLZ:)Dn[PSjSio.:s\Kl7Ql3^^"h7F<G'FiOQRnUNk39m
%?877,7Q'DqgKFD>!Hg<Tjn8Os9Q[9Ea*/5n(&6Wr%NBcPS0pNB>fIe"J2qt+F)QEe9D0,aCXdYR?%s/0j3JG?mE(EEch"('K0s+[
%-dQs"S2A!c^l6oZ"S<oAWQ=(/''H<L4&5,7Z_q=F4XG[Xi^]<d'STMGf?512eY_s#TY*`Fqdu\/Ub@pUrVCIZs8:H9(>jadDX,O%
%+(lJB&;?rDGC<lgW&#j(E:;h44b)&Xnq[BB6Nc4<nn1*RQ&g.#l/pUAMiSC]*XSL8i;Ro!Hi'l<lBuqaRk)fD$7@?Bf*?L5%<T8=
%(f9>m"+A@`?PMoQL[Oge3Z=[Ulsq#!g1r)SH'SD-q/E5bp"^8bld(K-pNn%HF1,G>D7j5c^U$ma<f?l&nt=jq:$8-5\mrdYY'05N
%QVLW)>aFm)GcI3J\*j@p-SXU>qdSVngoZR>X52!>c93>sZqQMTg1i@ka974Rl=:TM3O>uun`<KrXm[=sq(Lo<%)`=0W`s8tBI#VK
%b/B+$:"jZ\Q+C82\$O]QPrba[h=KMbcL]2hF1hA.UTo5_27n$/0,O*RkO2T]fOm/NT@J"J>G(>9D]V%mrQ&bu=6lsYm9@,V3k5[,
%gZ/dU3Sd!2F\+OlhihAt@"1aSSo:.b.l/0HaNO))K5*,%;#!iOSl(r$O>!,W\!?>]X'InJenF$bZ:b'X=)?$uAX02nFSSk:>O(*,
%/I!>*.<6^P%boSslHW<jH-iKjU&tfk:PiE<SGhpZW?Eth)tc\bU=H1Gq8QcaGo=]e44/eBd(>Vr"PN;K!B=(q"f]d9OA`!i;XNs#
%Mn^lrHE&RkOVI+1_"Rjo(IB!I8/9nSYu_AQ?9sn>$^<\779cAL)u*L0RqgCN;iQ)Q&@D!`AC0pWV4O^:jge>![4<\p3#\Gb>=s#V
%(oS.E.U7U19N@#Agb2o_<c#nf/@Z@rh(;o?_7TA&T2t4d-8V^u#_H>cFlTR4TLq;rX^C(iGj,es'p8o`>\[9-'2J%M81>*9]F.Kl
%<eA*+P@4uUH^1ktojQaVLc`F&pj.kbp`l<frf11cdHHD-L_X##$$?87@cH2/*SMIQN(9E_8\*E^;_$b1a/qsN+3/+0oK=Uo#J7Yo
%Vj!Ho4T6UC?f14c+i'5@3"4*m$Qb)^S2uq+Bm&DZACsM;?E,u&\t)ml=0?`Yr,poa_*_!U8#44]$k">nBW6J=>*jZa0PkA7Bc[oq
%*qe?`3(_I,\P6\ShBq-31QE691>poI!0oa-0O@S7cm^,;N"P?N#F1l)i&c]LVi@<Y&$V*_7uraqW8gRNeMo.(p56V:f&6Kkj#'ns
%H<sRFS,1.n'N@#'UZ;0&JFkKlCg:m*6#3W#0CpX<h(k\5E`O')F=R+23YPY-3/iXMM_Q3k=+nFJmNdY=>'("6*"Igp=nYB(Q/i_4
%M$WQe,dr2<m/B;E@q]].fucT,o.Kg97$9g^OBFjr&d.561+)_Eb=S$5K[6T@hu8KrE'7N!W5]R_ijeXraZ3Btb9[OHq!lo/R1)24
%p=?NhbVZ![ik.,9.83_-"NM>7g1e6&W?s>^'XJe"/e1WaLQQ`(O>r7BI3,RbZ)7V&WfM9`Nk2,RD55rJ":ZY6&r(GbY\RS)L<PoU
%?H7*Q!2j0s8dt<e@LFL6Q[4M@b!gd=e\cl(O6L5UeY<,*`*SXRe`i(,a*Q\"a@gci1="VP)1+_,CYIW<X6"3I>0?M:]&BIogSR2O
%[-jLaq8Y8b`kA'mF`tQ7D8Y5*o4BpW%_;3qU#+f!CF@X19luGb54mPpR:4n4K7+ct<nb(.Z2XiThurMocJW'us2+Ibc0-b=M-h!X
%2j<dta_H>)JJYN[pHA0is4UD"inmb.ltPpbhUr:<@/3M;=%&9OkM\^Gj+6K'UikKLip`k$cN!g[Eh0T)]-]J<7Xs+0=0)*tQ54Xu
%H*Z*+kVt^IJVaqEBihW(dnOOja0\Oh`#$\M1jj9`qVpNujHcsF24#4_D-JCTja)GQ][]d3QK>#<?V=UXl_;KsCV"G^9ZK`jfKud@
%o]I<nV5Ja^n_tPu,Ae?b&K`XVUuoY&]iN<Jql](Y@`)>\g@?7I5&]),B6t!p>@ZCnLE!PV&qbTV^i>W?j0'-jA3AXa>-CWXGYZsm
%!0+D_oF2A9%:-*fnZB/-3*Etr2AS085W=FL5d-r".QBl7`L=YhnSG;W86ZLRhJfWap)-W=H,CtT2R^E*282(.glVJ@&"q2nJD+%-
%f.7jXK7.;b4Ca?R'@W_aR9&$^F<=3ud2e@`9uo4dh24&j-F?NBe*U8<720=eSf\n(hB^S0d9`SZ',3#O'cYCAOEeJWT/LKe3.'tL
%3qd_/%X3')f7TqX!Lf[2>G94cFEqK>mpW7%HErsrI79`RRaqMBEtiV7"7nS@7$4?g+pR`T]nHR-Rad:RdoEI7'.)o8Ci;"oT]))c
%&t:[n;OjnU(:M4@&.UX0Vq2$I3>%L1U3oTme"5r/!m4iMQe!aPG2XBtOXsrjLQhmXbYoJt2).'bU4U*[@U:am)]p]`Uul6=7]i,O
%[N-QqfPh`@WGd+QH,Cs5BXGRZ27AK`\0:a_*^KB)!!VY0?"\-dJR^I9a')'%)'1BF+iRn&JY<B*LW#fpg;J'()/Gtc3B@Hoc&HqS
%M,6pe2IaSCR_j?dYH_,dPUVI(fPi,/$raLmo7fu,\$s/O@r-5FE*)d\/V$TJVN^^Y9b6Jq'N)Nn'@#LgDV?d,>;7l)Mdqp1n@_p3
%2Pk\034M_bPsf%aLRf+g(2GWLD:!'/js7&@)iIi9d"pfm>8WILg7j&0*CQZ.h<OY]e!iUj?+)t+FJ^)1nqed5Ye(;q:d\BYNi1A(
%2@4Xa]$c=Nq@%HV7[V2t->sMi-Sn3!30%UHTO]Y+Ehpg=m:0Wa6d@NAU)[(g\mo0PL7e0^4R(3/e&7FSd?3RYW>n(ei9i[^>MV,g
%M-=`5LI<u?ps`uFBN"PT@AciE@0)9e&jH4A.4l(k921j`>%jW6gGB.lC0I-e`N_*UU1lcKKep+Ls%l4P/5FBT(>EnD>$"McpdmO2
%U.p/Ie'h8dcZa&+Ju>dK\u^S(TB"=^%*t2e=dI0=#R%)13^\rLZ!9Ca'][p&ACGXrOGBK!#fZMZUpN!PVUc`,'@<b)WmRW!\,h79
%ldfb@\?jPk9jK@)nW`OIdgi`,YF@W]M`[Afm$W=pBWYsrLo=l8RR_g1:7`b!h2AZNC&3@?7-qMD.nFol6/-HJ^+tQ-8=ZSs;5(04
%\j49@>d6a(MOplL<mUHS\g5gK9bA=[$(J"YE[,[?14@jf(.aZ^eqp:QPmB3X]:he+WcWbGRn2>bKM^o'ca@=j!g:YB+?H6.;+JqG
%2Pqh,ohELB;FlhcCPF%?HqSts^9B`M$H["G7I8IjV9(SG-T)$l3Q<d.n\[!Z7o/7"61TkuLjNiUe<M&_Zt;Dhs"4O^96-Du58,aP
%Q4[;a<_[4GdiL*%!8nCmCtOu2H0cUUb6h5BB5"$.81&S_?3j`oLleW3Rl]";/rfUJC3!S=+j6)s(Q*lkN!RLJq,q`a>Q_X@jMS!m
%R3GfW4..=0T6Ss%mGb?u$)SHs-D="CVZ:cQ!&cuL/L"JoPZ;B_69EX)OV@*t^p`3;l-td`:DNui#tX]6+[D"pU?m5k<j+;G0o+mV
%U6#sq:ck+^,!;4EP=uEtHYVjA+c^/soX%oW)HhEoA;tOn92P[36^#ekOO?g,+D$,^F/$T9"]?NPQRj);\Y6?o+cFJg8Hh^D2,2I5
%6O2+1,cr1]PcD80W#WTo/0ul"N(,cO!H!\[-#sWP8$*sp6C,Na%X<LMO6;%:?%Rp6q]_Y[91]Vf$U\p<9?V>r=g>dO@Zio/R9.KB
%;="\ap3h5;,BbmQBdJjDbXiR8(?8ES)5U9*<&Dc48E"2XJRcPJE=IBJUYaKgmYU*e/iWS1Z_.aCFbDEId:1osm_/%6?sj%o_huV\
%OLgn%0FR0'Rs8rNX@jtl<NG+n?ZniT6-r^f([*eTHEcE\>7h&bLb$pm3dD2X'uO[S_74!PdP.dcWf*YW#EbQmR*:cDOnBHJ4-h_1
%&u'gq'P`>*MHV"@.RhK2R2eao,$JGs7qZG@EIk4YE>'MHPpQR4E30Fqn9M'f*R`Ccd"6&>":puNU8&[U9%8uN,Mb1="TYKDLTGjY
%'NC0EEIHLW>!:Gh[TXK9`'i]6n0U)>[T^!FDW#/AhjU_;kRrstnj+iZKE+[NTO$NF>'*Q.L;:DC[V@u\.rZ;&$N8$]N^NBTe.p=>
%85g:9,c(rQ*`OS!)0pW?'*.u#?OSh99TSpD9k5l'@PA?:M8hk4?M"Hna>UPbCiIkrI;U6.RK>RZSbQ>cD6=F%NGSd=/p&)>X[VTQ
%Gn(cC/=NM/mu`,.B@g.r@VVQ4=>V('"suZ20VW:+/.e31R=''2YHQWVn>H^."BHRJA'FL%,W1NH1&K%pG$JV<k`LEe!o5WN'G?Ip
%>&7,9l:2N*OrcJ+p>D#5Y.0E:#c'Z>)`H/90'F2Zq5T<&WJG(kXHETGVm`gNVU!K_k9fL47%5PH@UQGDK9;pm"SJlnL![CR.`I5%
%I`,9g\m=.b6k>%!B/bmj$p^T*(SDQ$p=.Sg.2^8F).R=m'?VaQl`fnSh`Pj(s(jJEdPp&>d:@o25?nTU#G)[if8qQtMch_NN(ADL
%[NQ*8CfWiQ7%A,jMAQc]8VViYLOL%u*a`P)a`Z8T!7?=k+BR6H&l4Ip-$Bs=/$.qDLQs2iW/%)W$`!b;94if"(cHpZJ:V6pD_e,2
%J<^N`QM)MM$mgWN3'D8c6#7Y\(<Z9&-3W=aJ\rKc-6iSE$["[E[gENO=*>orff+E[iMVt`Uu&j2J*.:<43I/_(qaf3H"Y#OFbT<V
%)\_sMU-9S>,RCe/?3ucCCjEjoA!dn$GgM8(!gVKELn/DTUF+=FW%9fOGi^ZKaNQO&=Uhl?OWWCed0LtM\_T/4-a7K4Pr1n1VR3Qh
%<>#Me`;$-/%]bMmj8dWhmC529&bQ2#4>#Skq)F\XEf@HHZN9,Z836ep=oE0GZ%/\e6F2aljFY9K9!,f:qoMZCI5*K.l3QI7eFmBH
%/@+2'7+MWf,dC#7YBJkiGekN1`SJJP9Mb"IEhq>DP`ENeUo`sib='7Ql/?=:9o)+[#V[Kf`"#hb`,_,)8-ZC2O,C%^<nltbM/&l"
%=hsR6#$W7&+QsKKAaJ,)n=U)]IE6IbKQo=J"\2*$LoU`;Z?/rUML8ZKCnudFJKu,d1Js4%2Ets@i]ZfGiZ4-q+X(;FpWsXD6+FA?
%jXOO!nE3mk\RPB:@agnTAF%agA`njR@0S6=@O0'nHrW[8B"tPRe@#)0OFO)$V2<D5&`L)Ac:4s'M6g+`k_M_:5F9qK;V`$o$hLr%
%'SN(+.M1],gH,niL7q[7%>N!QMe%G$.-Y:Uq9$$s:gL_'?-G`P;4J&9d=Jh:_'e/oZ>`3OT[@DV+>++iKuGIH&$[G*.3`gu=GZm+
%bdgK="mf$"=BQlM>9J&T5E?PO9k'Y.Q09)+SiOD;DJ2n`k6K^5il7@gTcQ'NdZ49h\eBs/>EXUVQD[DN7TRV0L7sj"c0T@WHRtse
%AWuU]KSL]i9J)E0*4$4,BJHf7M,(99e(?ss]%ra=*SViT@m+FN(m41d[DU">\0*Ih/7j27g=Z0sIL_;InYY"70_?mHLD*i5RMf9N
%c;<g/Zo6>.d):aZ5##C?dLg+fX:I+m53tJ/LAN!o`PUnu97`3MRUH1cL;i,*3/j)&O2K%ZI!5jT=Ob8TUeLFuKH*W9lSsQ>aWU=F
%a:[IB%mgUZr=H8&WV8^"$dI0,63Fi"I!-MO,<`t/M"h=K/Nh$m/QTNq/%-GP`/JUo;]Z2.Pefmaa-IU$6VW:5n=Tai>!q?.#%T@,
%@N=pQRDE!;.##Qa3(B)9^8<>qNM18?8^>Kj>t+\1b>i.;BgK]AA2=lsBOjmTpCdT.VY/KA`q_.=+PZgSf5kn)768N#MhC&j!1rMl
%5)4c#(lE>b#fXm$$%5$u[]kAt)1K/<`PKsHSqH&Q#KK?e73!:#Ec?ua_6K5<[ttB;%ZV>d3-ONC=J:3H5.J2Sadf1tJq!b_,j;oB
%n/,6",;H&]kVs`>pV<P[4q8YEP73%56CE8[EN_XJ@@eQoN[8R3$p*AtpHb^,X,9U7#nkadQ3'j%fp&NTAAW"^#.]'f:o:3@^R_I'
%#Z)Mtk7sGZF6hPonom*E7P-+B6`[O[]q[sBLP3lk'NcQQPkNe.LVd]=L0JI/7c@KuM=&(g_gYbW8N;@@JB+0SVP2(E:ZCFD.8?JT
%ZZ7mTQRU=%Ub=i]eA,BX5?X&CRNXl&P/D*A.WiPO,13C\)UslU(JU?.X%58h5]3O2I>QLkcbhMGKBbeCfX&Ch[MrgRYWIK=VjtsM
%#&?%u(Dc3qTt]J64^89K1DL0Qpq:*6,Qs.I!G;O#>tr;Gf]F6\h1$Q'8]9:?UX1hC@pThp_=S0Oc15"qd.1FC=7"+M4ReGQCT'I*
%OqV;+!eNh:pf!9<RN3:t/n,i7&e#nkC^L[*,F4-Jlm%,b.StY3F;"h1g&Vhp1:`7ncB"-s2(_I)&`1RNFn#biXu)qEfmOSs&n[C\
%Z^O?sEbZ5fJ2bFZ88cie`SoIJQoCBIVHZUnj2t^ueJ\3l$pun>*kQRa80t=rM[D%-=Ie[Y=NRfA0-O8$W=o_>%)G\DGOP\S@%_Z;
%0L0F%C:Jj1T4,dN(F/;0=bpa\+<j1HKER2P3fGOlKT35A"WaeP0Ws%I$q5.o0q@8B+ThF#a*Bt`U'h.F#bAch7hA\;W<b%:NXCh-
%;)$W;Z9XTdhZO#CJ&])IFpHG6[,d`NX5`V6R`Tp*A&bL-4;i;S-G-45C`qE6*EincAY(Z*$%tpfMRRR?as6No1d;1q^J$CK=H-90
%BcLQh"hLQ6>qm"&+KKDW@GXOR+iBa.;Q^9AKI:RG>`r?43Gtp\cpD-*ZY^I*;D^aOV2G4Bek$6,T;@E-3TFu?.N7A6\?-tR(tmr2
%.;Xg7Q(s;F3>HO'AA^/JC8=`F)?SP@HiqtnU0=od%B^j9+-*=hk]o[?R?.VUbH/HO&g'rd9t$%D&;%[[Eo9e^7b<o!S8#93M^1<K
%;A'^\RiG`X"%%BEp.`*:</(P?4@eFV+rLr@(gaPtP-bKNo5I3Ab>8BlkMJ7t-8A`WJ<gP)+XeKqdnSB?dF,$e!Ca&t4?A!qAMn.I
%./lq,Bh]KdM-pmB3H,=]X!Z,s3=$7[kopFT')N;B##72.`beVLloPj1jh[=,ct#5>c3Z'4G,_(p-D[U\$!'V@">If')'7XBJ!"4M
%idHAA<;Mi8bB>nF:A1IdHsqhM5T1?8WD:10EWHH78Uf)cR;Xp=omqesm8m^1n^PL7[T]Gd;fNIDg*5[,1ZH#K2,NR+P89!UnnpT'
%!c64s5/M\K,02/MGBJ'D:j\'<B-[cm6YM[-aC/0iI]smu)*)8hV@\poC/a6AO@-Bt'j0V0FcoOX_JMXCZ4/N9Sg!:O_h)YuS.j#4
%,MQ!L472eUZU>e%Hs\]BdrX#>(GB#VX"7c$Pftm0d3W;ffTN)M8do-68*m+9m+,`75XGN1]oC0?W=X#b8I!P%PQX<(S\5b#W^kSS
%L`dpAB7mBN#n2/ihk@\F9^tJ4H:#ge$b@FWdG]hQaYMOD7"L#J.N&\uKIq^`R?!d\37MGJgf?j#[Kc,p8+dh"FO?V_9#`U)U#fu3
%gfTOr8l++YKG)>A*1qp>c5.<AD&f"eQ83h0+aNeY**3d3(<WVp'gro?(tS6h/ot"]S^Sd-(9(7>j$:n_iWMu_+&;mU,m]eA%L]=,
%\8!07jo5sia70k%HJ)2i.mS<W!IC>+]VA^c9^*`iV6KD4q-^a(<_H/=0+NPe1'L8F4$\eXfu,g!\F#q)`T+9.W\T+"\O;Nm10iCU
%$ucNN=t'"U+c*@rS4\mu\h.8C[VgDke:dKP0,@:f'/fD*F<cfoB^E\]6%bi>jdI?+&Tfr7Td6X02;,j6S2nJN9fj%c*5oeS-,g6g
%V(TCHR$8kkC,Ad0DDAi:Tb)FQ?:(_D()&jqL]_7_p;\mf*/0pgFC[8Lol1s0a'K3pVP2`qOf0Oiam!8i)DQ9i2L0S\:=e0s_cYJ9
%hoQIX>FG11j&Q'a&UTP3K8qe;eYU?Hl+lk4nQr`J/W:EpW&Z)`_?3OCK()Ke+8$2cZ\3%gW!JI<^>IsNY#iU_"qoED<2gqAKYr2G
%:(1dg@FDthaV-Ym"paNP9gW/E]?hOgVs-/T$XomE+PlB!>B/e*9&G"n2'c"oDNQ(qK`rk1nSNt(&rfMPlHHet8NFHc_c4R/V(s/\
%jF8fQOeF[hi=SU8BW(-Kga0l[pd;TcY`GG5FJo@!FQ6%1KaJ1H@5>dK9*C0,\:n%W2XD69/CEJ`>1s01>$R>o1'L(#e.kL\Qn%rf
%95LmG`%bK6;9HjZ'$*Ml+aS.qJk-/G"<)2bM(/Zf?AVbu3"\EA&iS^+P_O*/Bc^r?Y\;.Em%gaR((m8XYTk:b2;:qf9[;`K>3ZhS
%Z+'n`f`Fu\n6h0I8Ye2[1CuPDW#aU[[OM1[Mt<kQc4fJ5Btpj)Z6;`dI+3pl&h;B7Q4NfN.,Dj3.JUpTI5S()ZKg3pjYsP-c34kA
%OWNVW+I\tO_1irhjin^D3eIrIH$WT:#=Lj]F,:aONo^d'/?D*'C<@:n[QHsufT3>'=2],'dderJ+=9*s/L=ue&NlAbJoD1Yd:_]X
%G_V[=KqSt'l1mH3D$h1a5.Mh-M=d1?YS>O/Y3ab.I2V+0DfWjK4U`Y:^!N-:'EgH3rH](kBRsVj2@VcPB[iPC7A]m`E)t\G=pTuk
%!&G6+6KB+t,5!4NFeY[s/I;L0-^#P!+TZ^m!%#0^Lb=t5Z;C??oc'>K-8^rJ(GTkp0O)Q8#c\dJ9pVjt-3mU,pA,Br_nm9#&MbVh
%_0VgDiEFC`6<0DN<p(?J(f1U`%(Iu1Ki!RIM@X)E?,4d4;L6M-18gE]f9d=Ac8a$o!tm("V)ftAa:JBP!6%oK`&5O([N<G`&8M7j
%MsZ9VLkg"\,c,op4mId!.Juq(g]rrk\D)gS]M)<Z#+o"_biiN&nZuh0Ef:hro">HT!=NuNNZPL^BJBPO?I.'K,HfHpeciZ^C0Pm-
%Ih#!eU&cD$KIS*m9r6$iU.k>TguPKR&hF-l=KKMbn\3P+9$eJ)S('"Wk-:*2#d2I1nd:2"O]`Eb-*)pcf/T^Eg0lgic!9"#R1,'C
%KcgUTIo"TaZ;6(CRUIt*UDsj+T(j:[,[-Gp;0EP'[4i*<Uu9G(=f,j9,u&IrZj-J]NMNKp3GP@GD+tbq97?su'nSOV@%5%-8s28j
%C*\6D_h2_EUaj5^Qlamr04V0lR)[T1j;-pd3BkSCg,SVY1KT`Xi=Ih=1LI.1R@)Z\L48W_0T3jaS#f.#A<^'<.G5(=3t$E=;0&iu
%T20VsZPkmUQT0YP@foI/0O&1DU\jC/6?41VKpCknUJf_s_M"U(M)(^IiiGWqe3PShKHXI^^V3Mrf:a^7Y3PZ;_]ck<9horSJ>jVb
%Q3tO>;+M/m`g9:i3/K&%5Y#CbK8]qX=.ifU),\:#),aLhn5Ki,A&\s()2rDlDqLq*L;d^FC7JF4HDW1Jj92P^QbE`*'JY16d:A`L
%>!>Vtl,;_CmRt,UVlXXj;$g%=jAXL@`)rg'"\K]0Y?WWr[8/7c"/euC"1>]Ge=r^1"b>Q_W[iG`d;bnb,Igm^qf#P@!>bG`1q.n4
%i+>cS6Xh#?ikf3M(2HT=Xa!IR5s8AFd)_^K=XNIniD/9m82$F-F9aVK^6D=BjZ"YY'\TaH'rD:'Bdu.D;4sq7&1)u_?P5qA8L6$s
%#J<9WC#q_JWYD)-AB?,`BrVeA80J^FK]GF\)oC?Q38UWi7Ea$Xic5o'W(JUr-ZYrVp8F-_`$%Abb05;_Qc:#f>[BkaLWIPr>o8jO
%AkJn;mBFte`i`>KcX4<RS_+!RDb$gm`S#F"6kO@,aMuV-)$nD.IajG\<D.r4b*1o'>F&H/"iAEgUhIst`<K#O*@>0o.",4(%G"SJ
%.\cP<Eb9/HH:>llpZ!Ts]59j=&h/R=aq$JI&*$8nCL(qYL29n`acSF-_2&<385gZjgJ[2r3;O!N`"Zot.g*XH6Ls7o(50Di/pqdD
%!W*5."$cu],]bX[B9I?aXA7h';'o+s;92\`"fT76E<e[i_fT<*TgA%DZV,V/,Y%SVa&Gpc-"iQ\jUJL;Vl?FWXu^FENgH"0i.ME<
%F.4\,%2J*e$Ip;M\pdV$dd8,XU8MPLR3$BJ^982%Ef,aAP!FFAG\SCSb"#"TdmIF\oSf"kgCIs4)%M/Ri03CR`50_NaA@o1M".4@
%EJS>SQZ=U32itX`]9&Knpr?YBK[-enRCDBn)1:l[$pRF@8MgqD!JQ7oVAG[H<lX",/O_i=N^RlhPg/<5Zl4kgV6LE:Xq?e)3WfP*
%Ygj:dfE0>mE2FZ<eguiH67S[cGXQEs+QhWh]%FP>\]'/!6TcQZ/Qlo4_E!4Ac[IX<1eSV$Q3!RF]rV2OJ4)",h'=NWnmVjDJuQs3
%A".7L1f7C89'1-C#;QkQLBT=L!d0d]"?%_QM)ZF(:]M2bG&t0<_,pIH>fV#a$1eB<ORTmmL,3g[P08;7[d<hT^)LA;Ge@W`@[YU;
%m.I$.pPgMZIJg#Mc_@#$"$s2PN`?&%E%lgPM1\@g\hk/71>)mk"Fr%d9[`\#MB8QR&Y(%lK#Z_YVQ_p(FCjGM)<PR9*MFUV,.t5e
%:SPG;FMlRa*;UI78,e(>o>4,0PQsof-dCsg780S8W^0"9X$Sio8PTL\:UlZW"XZ!,-tJ/lTqL-"Eo-St3.T)$`82bq/gD#F>7.+e
%`k[I'`c+(XChJjAL2"T7O6dH[IE/$l3PmO+BQA6mdg'r/ic;qcgfWjS?jql-$l2$P)ke010Wo<ZUBrG5(=h^VDjSd)p.3F"eA7&,
%>/]5THn)?j[!W.;!?.(YbY+FD`JF*c,/12c)T=6SiXQ7Ap/oIJF-&*gj#u0AUN+[W`2%'ebs#/t'*h\;Ghth2eVm-*'>ho^S='4.
%<Uk($S2'^+n80G49KbM4(5XUV"r$W<T6rFT)qlYF9eMZPA&?[D>a<-a93"p^689%/?Sje08Oc&#jQfu/[iL[pkic.XW)2iUM:7KI
%DSWW:VIE/N@&^g)8DBL[V<9nA810h(>.;/3m\34n&8'OC("On5]+!S[e%i"<Uq+nl9g2&d<8tu]7r<C]"o]Vdi&+n!o;qHZ3,3%L
%a<[<U$SOKH04On0_,"bhf2c;'TL0C'C;.Iip"UUtP'hiLK]0k5L>Ur'g1:5&&69C?1c0>,&V5J-2=RmGS?%3>ll=N-dE(GHGa*>&
%B1iYUm2:rN;\P=(\qqkQF]+S_7D:5',"Q)HaHif?#;Y1.BHocmB/t9VlH44%2/Cs>#[PEp<Y:uMGLDaHM1uRQ>%R:=%MkMofG7_!
%Y0o2d*qOA)G_o>&?p\jSGTDecR0__)?(KV:2N=eFSJbH`k@jDq"^aH^`O?PD1>pk\#R^*O!"oNF$knm^*9?/g[nJMME>+l',`+u:
%aotp^n>Sb_Vhfml'/f(op_l^Mh,?WTZ!is*(7C!&]Vb#9YpjCmT`S*P_&J:s9$:js-8pX7j$uRd+[0A.cpiF6p3h&p1"mOQYf-5+
%&HH3>E9UOJUgS[3I+LUd;SI[<*LR3&\;<d66OuBs#;@,ZL.4"F19&,Jlmr?[N$NA[PaibSBEq"q*.a"RN%I%*0QB^l3)luK0p8q(
%/??_r)oes!0ohI4Kp\=5;og:$=*D_e'f08Xhe,'iR*J#2MF5;oG@E!H:]2+@_bB/B+o7QHAu_*i6rF'')4V_-A-_63)^$bDYi^1o
%"b2OAn46lZ8a=%MK$?VIN3cWK"LM!4-.bbCEcQsh&;pS*SKR2C/Y_e.B:@(R3XoLH`.FY6/=i\hX/E9G@>6)q4<dC^/45V$E-\jF
%.X:[=&Lc^^%+Bm+DVF#60rNRL`$P<e'Kbq;5AQ0S`5N#q%0c9XnjJ0j$jqnU::B2U6]o5P-a=\7P\Wmb-Q5]NO<T!fnaa=Hn7&>;
%:[BUQ/L?4]Rd,ns*)mL(c4OMQ$_On=<R83,/6MM^MY!Q@!Z$P]pdu/$#p8poa>C5f^i1:45a1@#-%JBtG'L&1jK;as!dBkN2:Mpj
%$&\W>Nd-S\'Y>Yh!mZQ@0]EWt(2BNCaO$2!G*-CBTO;=SW"MCDOJN(M9e:RUG7+XBLJ>YZKZ824Vauu%D"m"Z*:;Z@$`Q+og,V[J
%9b*33R@Y"*B3YZZhR2UaM_pZ,aFuBcnOncb+^/nq_WtZ-S>_UWDuq"6-b.+JJgp/g>SUJ7#Wb:3b=Ob)TiU@\fW#\kCLN\K?@]4M
%5a+Hcko/i%&'co.!_dh>OoXVU!Y/PP$]qt.H;-@a.I$^(ZT-U6M[:D!@QWl9?uIK!@q/XDCW<nK_0E=G*+K^37h?f>jiWRFEDXJ7
%#X'a?W?pbdJK;d6h9\lUn3a<=Qi-LfM(;gNh2J,`Z;_Mh:)6BQ8Jj9.+#CJ70-W1$<bZG90q*J>+Uh"oBMH5<JGD/MD3t[Q1$Z#o
%)4ed'=G8>Fcg%bK)K]JNmEhl/JmqN>V1NR(Ql$%>#j41VRudYuF\a7ufI/LBM'>%3_u+O[aM>qr,pAs=Jh8<`O@WuW8J5`WiF_?n
%?ZXYZJ`nI?6q*7OM\EuY/lAkc\U>b:^"gOm-Buh'-f2Lb3Gq;f2FITgp9YW]!3?c?Yf]i+:ie$8T#EZ:>Y)u7YQGW]f!o24jCK_K
%TQ-cjl]6T)T1o<mo#2K*7]n@0@0+6:kergiM!@qePM+(;'G@]9bbs*\+k?bD7NVG>QHJu1ETEY"+a,unBNTYU#\Y72;,.-8N"HH,
%a0rr\0Tb[":6s!s3g*),`Fn@"JgG5XGjJra1X"+]3Xe/b%@,OS(usa(/=Dqt%WW5gCPKl(Epj`5K71WDT9Y"!N\@.M&sGlQg#D<(
%GW8J&Bt0\V<Wo7u35I)]eSMBsF-806S<N,/PFMr7=_NJMdab<g'Gf&+5!'=M"?E`Bj'1jeE8CrV[FK/7$<J,?Y/CI1[ojWe(h6V[
%#/=-Y,6c!t(?GbiI@&@hT*&L%:KikPV![a_0WK\[;dC@.bK2QCjoCa;aDCBL6("qrj=:QYfYTu9T1Hg._](qrCnU(OFrVb?0>iN9
%lZ7l:Y:3W9nh\b^`H#KnI(L!G?/.muXpAo2JqN3cZhOEZiiX.BVe?Q>,s(%lKF?`g#[(AJ`@*Dr"_"\m";)rB'5\hb7_ZgJ%npZ%
%>KK3F>+.$GM&sUg'sWHNH`1?d`=R2o3/#-23a*NPlsm8fg`m),BP_P[#`%4@a,,ur9L-4N"qc?NA8FZ7B]<8_O.tTV8=<hToO7(?
%(>J[/O2-G3O@5.n/Ahd^5K7_WQ$]2KhF&#aK$`OcMpIRsE&p)d_G]TUGT7\ngrV9\K#9@\MPI\7@G@*oA;$*OJ2?PZY[S9sdJ\Nn
%#+O-V%mroQ7LU*T75C%0k2g+)EFI!:X15o:kd"K0ZLSAL1I`%/(`2/`K]@cg/F28uQrYVA=X.0o3D-O`RB]<pgu^0,oQZTf^GR^*
%)cgPpre/]F(nE/9$PeDpS#ahRo:s#GpJM98MA"rb!aTD>\P.[_aUXFlR\YCbWs4g:EPj82/k*5%G1KWP$^W'l:gp<Fip\5bS1WiP
%*%);;m/_X,"Q/>=.spt\pk%$j6f]C#Le)@l_?XPVTG@8dDQuVagN&2,N:,35"J2B6iM1eJ&8t:L9nPN"g'?9]*F!FQ*WU4pYXF4^
%+l1$4!_CMeUgmAH-31i/a+WIIQCu8,b@sgOUj409LqRVEGBM[V@<tfK$Uo`'VcKmQ3X<cI"D6&WJF)<X].6Tb`\ZC-MbDSp^16"1
%AJRr_?pfb]Jh<09A?it9Ql+,TPaZ\WF_Vi]88R^57hs1@"d4TSI.qQg1fu"ZSt'eAJ=,m5:-*F_1.Uh.J\OecO>IGG,au;0"3uMb
%%M\tKeuk/II*W/O&$T>rUAto]no<I+PdH+.e7$O2fghWle.f/ao%EmoeFbF&6%fq4AEGpF2hX[D=?CPKNPo%+nKBG\5H`d\Dt:#T
%Y)oH^)(HT`/"_T.-Ls7R`7LKO,N"Z:VU4sc[ituAa=m%V9p(i-4;S[9CQ>Om>eK?uL&eauY;74cam.$k<E4k6$>02a*Ws^nd7g?0
%`4I=-iBh^t8g0o'#ed3ZM]kRk=T7k'$8e/CX<=MF7/)!6bt:C\;A[?1r:/F=e.i4.Z'5:T#3gJk"9[+ZBTUk5&SO#SK"u@9Xr,"O
%CmY6)GFMh_]A^"M86W_1$'7Jb"eSWsUr[M<2h78.6f=V!bY1Nn;r@L(#H)jd.)V5+P.G?19leDtT0KSDIT4Vkg#;luGSEXnfZlmc
%K:j'OH-KaC"\f1kF7F(6CTose+2VFj_(@Mg)$@.Il(1csHtI<<DG/*40Uf_R0!sPM.s,/nCc@2D^nr8s&7BlYC@q;V"lp5th3YVc
%iiS_o:uY??mX5$OoUMg!71QkkO^`@@7IoMES#iTrY,2i]*3F?DO90Ha)8M"e#/LK7=9Vb5.P"NEGf+'t:d`O^b`j6U"40UR8Jbgp
%68Ve:mJ0Wta`Y\GE$,YVfZFTM&EDjT[\XC"?WSn#YZ+L16:0+L>RW#Aco5B3_t2B*Q"eT%\WIL9B-3Nhi8S#Fg>sq?fU7+hAI)TF
%X/6cr]lXQ/!+37CPE2ZYZ0%K:P7)G+7<^;K9eP/YBH,hK,o6`SI.(--;AN"e+CZNpLKoaukV48.Ed3_g?+6&seA<C8\7[49k/=5L
%;&MaspneW92uHt%Lm"p0(8b%+=:3W\$J&%KMaD`+f2.<&[hjZ^nMoDmb,o&4\4nIBUH<j=,?e'L(XWLIN(Rf)%S`Z`n4#j2X&9O^
%"'&EQ/AR#um>@Cr@Pr1M&%Ak;LfRe_2(jVUSY/@l#.C@ce$s5O=4(?_`5R"P;.rV,?cmrH6me5?9i=s+]mNh?M<GY?WUP_>5,H2o
%2i27+@F']hUrg'p]E[-YgrPd7Hks8,<6@<tBp+,!EX4pqHbm6i!<>#B,VIC(e*MtE*m.Fn.d+/uZ]V5ae\`1rJ<^[^j.q[WPh70>
%fUjiaXW5mn+VZ/i"R=e$iZ1`1Ntml>*De&ZZ**3[9!/a-b#d`),69t$PXJ.&>$?Q2qc@a;OH)sc$t1cZ]an,p,R2!EX.)(n)@<eG
%QlIJ@&5eO0+H:;M;<uW(</"5<m&%l".3qic*%\f;LQgb3noZbD$_P&i<jGVFVCY`c"D]4:Mp7S$o<Z$[9/[+.i)u6ukD>lZ-C]Y[
%'-s``lj7$0"L9\D*.XX19oD.]'r'4eGqmZG30gXPTJl%O8co631%V#jVJGeV/93>l]d72uBu>u,g3+>!5^ALHHRG!kY&H!+V:Kn3
%Q?%k&s#D8RGWD,5Yi@?1PZ6`5IOn]`-#laLo2S;plZ^mbI<EULQ[JS00PtspY(W!Q51b'X,;'TQ,LbeM*#tQfq&0?Hppg*SYJd\*
%f']N$,I%"fb:Krb>apfM+oomQM_Dod+`R&dcPr4>Kf-W"ViD$->>,GTkE+dV0d#33>(=UJ?c@LG-$VCqmrK9";/-jNU]e+G>:r*K
%gQ#'oUWG@C0iS9efY#.d>Y!tXqdDIFm;^)bN.&MFWZM\8Ne?Z^Z2Ot"?uU0WVL7a&<1GS;q[t<_ePR\V$eaP2]Jp\lE7I#a,m0S(
%fl<gTSRe'91Ct5#pQko@S-QLQGoekp>ZU2$Up_SI9_h9`8IZo0M<KT0#:bZL!?o*&Ta!\$`@i`^^sh;)X)p&XFc_)_is-@.NqBIV
%WU6_X/ohnE;5JREDqO?&J:k2M>U?=g9n^e^=ilk)k,O)^?kBB5)I67Or2dIHR^F:XH8*'T<W!Y&`c+_an#KVao&W9T\5=8,b$bn&
%iRjcINk2fh'2@g)Z_llq'U\"S)67l7,Jc'6(':QoFdCX$<.`:lB*^5b>`HkEA-h4:'1Z^^3?fghpgb1C.=A*4'7n!F.;Gp"Y#%fT
%p.#c<:Ug*Y/>jaf'l5A!6emiiFer]/M;+-O9\a>4-ZA+;Bnj20%n(tm)JGSn"QYYt(OT3f`lIZ&I?t'Dl<Dd>HVH-3?BnHr\t$aE
%<IH-m&9(Ya.5NX$jDs[dUl(+2M@M\hQ@iYHT$^@fL;HtR8MhTBaeB7-3^gTQ//CZPEp%spF63*GS$/<g"@AV]ABAH,+\)__+1l#k
%-d_omh>\"bk_4/ddG5SZmA\Ms:N#1M-Ar73%@,FuN0RTt!6OHL=1Bf<X(jUI#W7DbW?/PE3]7s*Z7MuN&:;fiPG&QKEXe8X=a+,p
%DM=32S'TJq=>EXlZYcfo`q`J5SL4W.pc>Qm7g6Jkjgr#U*3[>&6_7eiJ4K#,^V+^Q[2mALo3=Q\LHFbZ'hIJ>jA<RP!<WDiJL;KF
%Krm\bYYVaTD-6;BpPpn9EUWLtqe27g2Pa1bnnoM3aip%9&M)kh+d$iJ>-cF%6VZcY<J-i-jB'LqDW?.kW0*[OV+^s<_uLlC.Vkb;
%qr#E)4`TL8.M)[f<)C-;0+-=g\EYAAitA`A!ZgoI[89U1I#^#K[.#R?$R">@h)jZAci_5$orXC'_hohbFJ$=cIW`jdKr3:FP8[Ma
%1U`mSf_<I/a^-9M)l0+?p6LZeAk\r5CHeZ5SRW+VIjPb'BX@d<heLD4I$e?Kf[lo"eds@*Qagu(Th+Ib;ZX?/5L]m_5KAh4L=8?\
%&6?/N^gk[#$6DQuT9tTCJ^"g=P8A-KUf</_go]D5JXa_Rl1?.Y16_I4>.q;dj&hj$Q`I5`4U"VXo)V6JmmL_8]:T-3=/VW,c?>tF
%_`Pia]#GX"^?GhkM.qcV2RhM[@Z.!IkGS*IArdPc[V\u\<h6GQ`5TCU"bJpk8q@Ah.2h%Sl?@!.L?6%F5%C(1johFQ&hJ\.m0(dI
%Bk%n(*'^)FDJlI0$BS;5V*!MQ53LB+ak,q(;"</L2fQlGFC]HgXj<k4#oud'5j3EMWSH;)<mYu7R<5XsHn<dRn#NP,)Jfpahj`@<
%miQ!2P[^I3O#Ud6!]3U"_B$#UrfC>Q8Z5H>[*MV5nto;2WB@)$+,/P=FlfnCNaqUKC#1l4f!M%W1J#35pYS;HTp,<90p4@Ykk$cO
%1]Ug(Gu6F\7e.'YeCB]0/OsH=<<9lp[o@Rs;q!q\.^gTg>cCoUEO>N<pJl6QP<CW^-Y#Ze"Qr`N8^^3/ig6dW=Db`$GtI^C-/@=O
%N_9>JX8%$$rA%54kNC3C1i@=u3s-:QacBR8\8sHB0\>/K^Hau0?efICht+@i$<gHQ'"H&4UTAn]rGcT]5La,Jd>JO7l#%"kD>\bS
%@ol-C/=38uZJn]M)"3ra5>ErtD%0o5H04Lg/J.d<9Y$O&A<;g(a'Ss2,=slbF>"@YW,(_CccDI4d*2@B^739^m!&B0l4)N8<g&(,
%Aoj*'jFf<`VIg5!S0#2DCTLKskY1RG!:!hT/f[UVrOD=1em:JO2.J3o"^MKlHCq)EH\O2h]]6*7%^)J3#gm+W'TG,9KB:mkdPs@1
%MrQB_D#uQ]o!G"]E.TmbP\r54ek)FSf&:oM-2%m8f27(-:X:(p#/gp[I9PH_,e#)SJ7Fh:GK*ThBeR+<-.(:C8h)<D[KJ5%R1RdW
%-21"'&NFgcC?o@["(M5ejEn$1Ho9nRY'@I2VAsrh,,1N\h0LDAX,(Q"=Y2Bgf;u7nN;In3:jd?1W%\WB0Sq)9Q_o#DWf.Tl!..hC
%/oa+-FrG(/dm!sL]oH\?Rb`]cC)TN_+E\`8-cG-m[Q52.1YOZJmp93]0U.>0\<`Hb]pt&I/3'X<r9i>u&+.V;dO]6t<Og=3`T"%P
%["aP5ld5Y^`UJ=kh\TdlG,J5glU8&WroiqpIFt=B8RbX_`-0to7]sUIO]ue=CcjZ9#n8R290hpeE.dRhf.C>Kmtr;=Opp`Hl@?bL
%UT-nhnhRu44\1^%153@R\s*OC!FZ?W_apftIa`\@/OqQ$]4do24(k8[GXT(a]^<=olrTN/Q$1&!Ga_LCnb8*,*$Q[P.ZSSgGM^Zb
%Bpk_L6)u#![;7Kfest3:_&BjSl`!o\*=<93[Rs/NO@Bs\Ft^BU:`hKis1+<?C!&i>PN5F%cGd]7ct+0@r0!@"^0h[uWG)bHO#Yc)
%j,g#&4eo$qGQ^C7K#nUZX?n7ML)SrC")uHrm*C)P%QF?qV.u/D8Y`aNr2Lb6[C+4kp0,jSDGC\6CD?tOlleBhhF=,tlGXS8S*&6d
%FNrHXKPaH0i_o@cC-O8e;Rp`/Y<cN?!d%8.$'1nVgsa:Fgk[^<":a!0o$gitS'+]b)51s1"'`7#VBDi.NQU5H3iUlX:[_ZbFVOG<
%q,ii7Crr7b.`6h%CW^CX0^k2Up3`6AY*ciE;)"!AcfM*F.>7KE%"ZsULr5$@@:s7#\/\RQLXG]aMZ>#;#)*c"!T4?8KIStWZS;+Z
%7gY@"7Bsf7-cVcmLgD5+fKEg)@VZ,ICE3/U>;/Lnjarj&6ZW#p)n7+nGMU_%0(tjrl:Y&+]Kj@jkG2pR>](VbqHLpEm3_\SZU@:k
%d;Vb"9PF(tb<0DEh?V@[s(]CA^Sq@T#7T%q9LNk20^^=7pC^>*@;-H*b<<)DIr`FUN`CAls7,P"r@d<.s"YbAQ-`B5^n"j!c(3<L
%jD)4s%0aC)OZ=;T@"pc#!4g#K`O3Y))dlf,go#;TE)E+H^:@(*-;;s->,?XoBGqUeXb0`Q>A$@M7qWM\`YQkf,$QZo%9?nbLZ)+Q
%_plE`DC7^\L]&I[)b$)T_^)5`$q1u&>d>d)O6@5`9lT5e.VFThg7F&7$-T#3+S26;7eZZV'`.t]jKT8[cKi)h\iW'!L7+&m=UV*n
%]TR]+jqRH9E<;dnb[En![mf/:Wk3ZJHh]H<p8LBTSY,s90K:?mg3R>neoeq(#N8J'dH/=l)Nl"2Ms18g?a&4Q(C#&^KoC@O("n'*
%l(MSt_">@$f1OW?V'*QF4BAtOZUo,34?nEYhVja`?UHrn602dd7hO"9H7F".@9j3538LAh:NF5>Z^d6U)TflFrMCXb%mEhTqKkJ-
%7`_P&ji-J_d&?82>?GuL(HsdEV<A!j'AJHX^R9X#fTP5\d`Umos6OlU-k2TX6:U,D4;sfHQAM:4969Ds3SokNl81FO5n^Ra^BlT0
%<tuEY4JhW4Ne(p7h>@1rJ\M.4K?USBgF5b'IG:!bH=alEmMI76O!7:#_YIZBK8gH=!t*;sY@:MAa;TpoV.?lT;`oPLj6&TW"_.9e
%?#%:n9VYQ2O]j[cB6_[>L7/h:j_;]@:=#+]'R,>R?(upO>uD,T#rkDFO5\u$%=h<:UT%2Mnko.8i`hW$M5>>7(G79(m)k>Z:o*'L
%pJ;=H_q*b>>=6n(k65<NBFtPCQ)Im$A8e,ZDoRKsLnl^GBd8gmYemX<N`H=r)4%0B8nJF6Vp%Dj.YkiF]!guL)ht`r!'+&%.np#s
%)Ze/,WM;T1O__pI_/Y(TT=W9F'JLuE4/S6OJ\DNb)EX]4NBF9*<n.m4MMra->$OAFh[_BKnnn8lNik2:-<`V8]ZS.KQ`Mp:d+72h
%;^*V8Sa]NBmg5uSQ6rH4;:9#,N$1%!-CJ*\ZmI9NdV^5I7U#iAC(r]pq=)!XNU!]a%g6Pp7RQ0*\lrdYdTp&d$e(o,aITnoThG5C
%dDqqK,`nO`$'(``p9bO-o[L_E+-<4qZ?O/&;@%SS/M1'c,m7qHjlfQ%L4=M60!HlhXtZR?D?>0pdTe"XONeE5=Ln2Lp(:2+7^_$F
%!2.+'[*4'QHCXMZC&1L.VU@4)rfbc0>cKU`XMh@#9tCsL8KQ&=pFrS:eM;g?)nG;]$K@[2X_9RF4\.ic1VL=ta^@kSomH.@ne$<V
%n_h!i)2D"7"l'/S*2Sfa6G0W.2Qmc-&(3ASVGO>J[KcOdMpkeHSr2:X%CCl4ORqlBU\^M3R-/l\,<p8,C\OG;';LFq@u\D@OLl=<
%LTf:9(Jk1S&*dh/;ea6>e'2H42eBk$@4[m]2[?I.@:8.OS*[nX:Kk*:7u:ihCf7TT@n.GX\ck7fKIB1tCib9!qB^GUo=DJFOmWsQ
%7!sU6W*S^G&O5f#UNUW:Xr$d#W,0XtPk_=XnN3qIr)\g@@h[pS,D.Jj#0JY]j1W2s&,3@l!NULhdT<&oQD#1QHSj7+=]>q\:RKYs
%2#F5,6F9NqM'nllobc$`#S!^*Z7%hX-Bq3GGVoElc-QoXRaJAO+X*G1nu0@8Q4Fhe-1+(gU*j)'Ij&bf'WSk*(-D$$iN5:[f!0"W
%Ibd\aR1*J>kA^-m+aI@^&Dd.:R<lK-0T0GF"\adGhsKIHqNDXMPC"EPZDPO6WI8jY*c#MR4p_52Y-qC0Jl!=d$\6f>$i;bOBT3G,
%H0_TkJn`i)'*>GOCN%1E%.AG9%Ud[TPs'lTRgcjJg"ECYH;A<6_Kl3QFkG&c_"jdn`-pO^+?e$GTZFBOfUC)l)V%Oo\YbEno,4uE
%!*ZEfXlP&8H*S2AO(9rDSRC_NB.!D_=iV)S%,6"oR^Nq;Wh?p3=d]]t-M:T:3<T@;=gVW<'BKiZYI9(tZeBaqcCMkM8*:BJ:.dE]
%Rp-mpiA<M=rBqlqU$WcHQYD^metmK-hV>6rC!g4[#uqpp)5g(3LB\%5nn[]Li`R,u=@'1rS4<ItPX2mXRP[=RSp=Mg.7($"lHql&
%TZA"Ia3#IiO3bL/G<.p&#f>2l["9)P[IP780i6_MjPW0sPogLTia;uUi.K'2Ntm&T56lWdeb]_,IZq6RenL@7ds<AV!m?G9O1E.m
%([5-]!XLXoa+T_pQ"JaN*@t3/X$.tOU(,5)q3q/`L;9V$r4@[P!(/ZM]-*r9J_Y[nC\nI6aHN"7<gBR2(X^hJXl:Htg+7tHh1Ii/
%#B0L(3.6*CkdF3#6[R<`ZDV++U!iF/M:u5qD-FTrN]h6=Dl1T(l.GDjNJ?4\C$"4#9mSr0aO7IT>$:f*OHD>[c'te2Iek4H.8U@l
%#],R]U>@Y/LI/Vb&b&K.!YnK.p@iM&E=2:dUQrA3mq:j50!B2+W,i_;cd4Yr(B/W;JFUCBU>_S(:XQJ>n#,B:ju@j^U@E,U[as;2
%dB^*6?VSq*>OZBb?GGpG3W&O$U::*2D"3[cj5[>FI_9<"U^^iHnsTGs'\Z_T]"EI5*b6)SG"pJ4(==XPJ'cZV?[C4+8/^Ho>?Y=B
%>%+8W`jHUuGF,ZecTtT$`uS#aI!-ES\C>/M=LH!:E/PBMJTn<o]W\Is/.F2n@4OD_7$pXpc*KpfmY='0)"]B51ThMYkgRVRi1qPA
%[/'egGj8PUI"=Eg>6s%n22fUdat:e+'-GPWs0`lDCG,CH.J8jII=u61DU:3J5"+N/pANJ;GQ%64').h`YMRRN-+SBI:WVO&c-K5o
%kca+R_u+7qXBbWb5A#t+4$@cLT;T`4iF@1oEmii?O,r/<r0/blX8.&4ZFB;S6uG!N1Z).gW%gLsb@0I-hfGatYAUV>(#&48Rp#N-
%=I!e]W]tffB]0_eI[tP&B^E_rI.:M&*=?/eEJk]2[t\jWA3l`;7">/lo$o8skVM7_$cfW;0+mrL6K7_ml^:Xi]mBqc.a<"e,IVic
%F!&H&f22XrNJ<B(_X&;o(P^pWEI9m!Z0QW(/B*_!_mG]-8a26QcHi8A>UE0;_m-ribtO'Gk5+:Z\7SVhUd&HG_*^*iV=,K'%*ICH
%bML!NXd<BM]6dBB3!-!:P;4!k$#`\/;5\F+R*VRce-&JE)Cr?GUmOeI)]1j(RV"+E,nFPRFDX["1NFOA)dX%0^cUS36J<K7$>>@i
%]J,.d.%5hC_IfFK&9IPk>XFRdiX<GJf,pq]5ppB_nmu.][>f&E18ZP55pn-iPdBE@mFTH`85>dPE'J:R"DQ(oTqaq--!YZ<crlNb
%;DVFlLW"In41,3hVm!h&jW,t+`Pg6tVkR[mXqDpql\I!;l;1S6FaC($;1:W<("]b&BYD^]A.]rh;XPub-97XGl)5R=nj_'<Xn^kJ
%WCu!jUf.Q1Q7=@%e.8E9<=SVc^k.D(MsSoN8!C\f,Tqo7I!u0F1k[\/'KAjBL;#44L,i%T*n>*MGd5qR?rJNY#bK$2/M0.4,<n>#
%6PruXos@0/#JM!eJroq++-H'YB3>]=iQ1S:<l25>nB('PZ4FmZ$**35ZuF6tRL22L:[QM_>gQA0Bj0uK,A@j?3IsFC<&UL^#I]e+
%;7jnm`cG@*0%.dT0sYY"BLpC?aWi2jK2_==a2qC]K>.N'*WV,4g/:X<.Uiqu_Ii/J)i1`(8QgTre3$=6R?ebb/`GoYFYcg-8g5WN
%NOsmP2ihpWEcG3%`TT"rpId*3qhaqf&bJnL9KIV:kaDlWR2B\)*=,Fi-r>'L[2^n,*P1m$`83Ot$N>.VAG/ReD"b%oe9j(&$Hhd.
%fo[5Mf\qNaIIK?@Fi=mR32`>l5taX^R^E2Vqq!N>BbWI(;@uZhXltiZGc\W!5g9TtU:R$qFkf$]Ono2%Ku2>uXH/rt&YRUfXASP)
%)Cbdbk0ap07Y35q^'Sd<-b#?H'h3d!OD?ordXg$^cs-+BlB*3p-GS6Go.PFe.*1\;;Zfq'dU&q+brIV,PqA56>G-3)!J4*>^:T6D
%hTYJMQQFnBpBEhc;A0[0Kd`E#pA9RV4-)Y?b@qLV9hB@3nFj3E]6/Eip2EO<01-A?C:6$7US[<6>M1Wjk\$nGV6R<o%-=hdB#%#A
%iG:&IXsmqU`%5[MikB/IPe$P*&D=LuSjH4>;uu=ZMGq0bQj#YJ&l2KS*?;Jhn6uaY"tC'3@Put:.1LN726s&JU!s<T)erYt;;T"3
%!V7l'm5e/;]hN]h#53,=9lRSUh2eJdXt0..SUrMb,[8_aT&&ir/")ANJX2NIKn?:oA'f$$O%ST<X?6-XQ#JXJb/EL'dC1h&NC"WD
%,PYaC4UkMur(W^R8cl"_O\82pX@`U+(gu;V&l;Vo2?c798I@&gK!EAIaRc/g>a\uD-UI:fZuTSU'd,k_:esbafAJkQSQ/tJN=(Fq
%1Q?k$bp,BjZAth>4\2Rna]fX-=A@_]mfcoM&,<T%]LOCi?^g'<L^*fjV)d-3+mbfe]=jWnr3[_V;:-e+0!-*\kUF&.![@GJJcU,#
%U9[&KI.u(j8^rR0?%m?j$P2PgI:da`.rmAHFIVK<-Gl/cJ`s9\l_PbKK0!Y,/<DP'lDrt0<jbOdU*CIQ%N&nLr(0L[H7M$aDN7iX
%dpZ/4qE,sO8jk_;F[qspf=qnDJ$JJ+2HTm=\4;Q'"XAFJlAaN_;pZA9kS^Ru(Plgc>-ge"7(@!C#s)'A:QBD$RbE3jg:A)pTHaNJ
%b&t'fTdEX_h@T-Re.(#,ZunY`XR`W#:^UfMe1!a!4J?#-B+pnY0gN1ONRAkB[^V%#6XqAmofm$p;e0D"L8i*W48l3XLZ7h(YOh2i
%I,I-L#U3)sHWZgmj9Ci[UEATUmq^5U%2>gG0\^(W<F8Y`H2>8sBIUjdlh1!qEtN0#d,</##Vr>Xk9[R;CK\!h?N87J-_`5OkK]88
%CSGt:XH82#^qY/S';$rcmT\"M?!VnMi;IhZbC`qafV8t`(s0]n^FgL"B*)cB/,RW=FDmO!3,)Q_ab9KRMmFSmC%Jnr9r<-DOqZaR
%BLHL%@dlpG:IlpD)A("fPL\(Lp4KQRRIAAN70DpdQ>s@0m9XcB9S[(H?eLqfI/g@;"6H5(=;;G$MhBj<$)Q$N[X[s%ksPMl6@'1k
%^*RHQ?5Y9&Z)Un04[#n,Vrr/hVhHZ;#A6iSpZ>GV3U%I9_6];Ugf>D<$_g)':3E,$iLSIIc@^RH()daNSo;kM2\kBYYPW<#0\-0Z
%mf=c[`ToW$TI#`%M@1q8]1:8bbAT_iBG3,UcmfE:6"@6fM47.O$M([[%E0hapaYF'c[%pNI6aY,k/En4[=GNP&C"W3M@YS^Q?+6Y
%SYc3$k6<f.UUZb\K;-7Ii(k8?)X8H@MeF2a/Q7PGcI(n]U'6`bORMNeS47^C">-pFA4DfN3RW])883<`PVNhO(uLBID>B[52U([C
%2np)l=8C"9ULON)ij@t*I,:qOc.:.@a9osuUq5N@pN"gCVnsndEh%PMRr*LSk'UC8DStHrfJ3`Zs7PhS_7`p:2ad+UA@?lo8/"ur
%E*d18[ZhG21GgM+Ed#7Cf%BgKHpmOK1Z?&r'bQ8C;P3iLA^[Ul4X)PT3Ea:A#?d_%M$Q]g%E^Zc"5i>F&d[XEE?,2$HjbS)7S?17
%@hVaTrG%r"es@i;./6@L)0E!d?-AA^V94hgoZH%hQsUgm=ts4(c;j&!dZR[@o*F.e>`#7*5+UhUa[B:p#jOn7!B;QA7',_tWc5Yk
%H8]6\*iJFVM_2nQ^Y3[pNKVdR-WmXSj$I7#j[8D^`pBqiE.SUaUfhhu6@76_gCY'-I4'q6$#W8gb[dJA+DgbW1:.l7bI-.?I^Ycr
%<K/`B_)3fmUK(Y[ci]g*HImRiFKlOZ:_k"oV]l;bj+H/d)#)@LpI`:pBP"g<l8_t(8K0s:LrZn@W%p\;UHaMD"KOjpi.>5nR-qrN
%WqRQ.]3'qbApW#0OM8tB#Q4"qR!@Op17",9qh0'R5*$H]m+P!Non52LTS^C<dS.n[TKI5tf*NS4[foqcB]u&%-/puW2D,S>ec_Wr
%-%iroJieqr8MVZeSmL"9TB2LIWiRYZRcBIT"&:PqUr@ODGpoj(U(1#/5.89UB=3,#ZK]$_$olBLWAq2W.6-XO@1;:r&!!c!"=JRY
%nAggbdgcH`K2];7qqW;)aEZo^m/X8CZ`kK1`K]VSfb8C!r*FuR;)BIUZe<ASmsEsXC`6a)9+L.OS0t\/GFQ$Qdl-pj`.TN2`(c0J
%`a*aF%<r:!)d4cY_CnBq]RSNl-j@@nH"Et+SMki@?<LXi>Hb-%DY<(UiGQ*oecWV?pt$RcEf]5_&%$3>>7WR)^p=9W/MSEp*[i;X
%Y<C6Z>kuqQIJpJ/Ki+4Yj;Q,!C4bSN'AobSaX*toK%5J[g2.VW$ccc<!g]aR$\8VQc5e2Y!gKm9:0aukT7\q'o2?ip>9EYal$hK9
%ihQ0l60K"WClSQ@C$FO.p"g\"J+0`c+r%b$IpLu;*b)+SUAd?364]4?P<Z/?#ITtpb%n,7SF^?"hlp4B3lOX]AL7k1`4S">0f8WY
%d+>3(-h=FV_s8Ap/1&W;BV$C[QleqsZ`6SeKFOCOM5R`llumDYJ9H23\uuYQmsP,$J!nX_s'^`T/_#A!T7c=O'U^<0eJ'SQ\u(;?
%Nq7lP!c@ODMXG7g]Ubc+$i4Uq[W7C7:!o?kRjg+:i4D#74O*I;*PV"6*5-XTWt7F;pRL,8S!nt/*N#/hphbO<0hZ(CQ$=@$:8L:9
%_kZRtB&m'/@=%0:JFT*K507ktojd&n#4I7K=CSrdFM[-poG'#]-dS.7oiSO'5UpOSS__,2,S8U@]<b5W0F,1.Ca99t.oE@<98,U1
%-]*92K9n1VJr8B52\b>ZAs*_oi<XP*Di5jgl&&=3*Df8miQPFUm[rh7m"J`tqT(3I2[%/jo=Jip8RHl"GdbuL+""XlcHU*1W9UC<
%+3"BEZqAA/#f^^XE7e8sCPiV"A'-_`qraD[djdM+&n+Bk'.R?&r3o(&*9p*CXRA>.NcU-/Up0kF+0kEK,tk3Q8.nFnUPmY_:kfl1
%6"dTB\k_uO\MJ0m\[k8q1ka2]QG*rW8s[sF`2W"f[:F$6d@/((qKE!=4ilLU[i)EUYT!..&Ep(S=YUI!%>KfU&VF#c]2l/E\);!X
%$6Y`"%V2m57`JOW]/rmB00W:C[874)TjTi/D<`EFA%K_XO7RaZ][&jWr+fjds(u=ms.?aZJ"ORWpM^(una4)CJ1@g:Ba>?=OB7uq
%/r9>3%Hf\1;Q;ZlO(P6cT94nmZbj8WR'#5e!Zf'uIWJhQ4b2rsWVq@><Mr=jo&)ZJd)78e'EAP4A9.kRjFi;JLL=.rU_u`I4Wj#Z
%C(p]iiT)8-8X3I7;CYYW)C5B,!U%f$:OYborTJ.A1\EaW*8,.p[Q3/CD_8'*8r7L\/&da#o4hV?V]S5dh3U.>)<b;:mL)\jVh*?R
%=N2-R[(@9e&8)jAe?8DA`5UG"I(`\=]*R0U3Vl).=0\H]_+HqmCN#GlQ&*o]Tm7!,"u/+&S+"rt]GI0$P=&[?>*-9O3BP-9$N8Y1
%F!JDmF\!f_-Xl^f`YW09%Y4h\oBt;@8tWQ7l.jE^-$V=IZCg;p5DU=RDOf4ij+eMl0Wbes&Kf[PC4B3pPO?&_&_-YJ>:Kg7]rVFW
%MLeJVOh7V%KC=(R;H+;3rgofkmbZ2g-4tiPk<&8E?C]h./[Iq6Iu*Q8GP8F)=/Ysr_AUU6fJGI#-4q@6i%.<7l=a&"`ffcR8cp.^
%)bk3l7qGK"#UGB+[Uc#8/oJEe1CmOpXf,K=I)ZO_:pa.0:7@Ws4q^dhAkUk:C>I\S3rNm2=a?IqU0lQ/nlZkT6'%JTFoh%g)T79l
%#hkmIjt/pGoYEBAIMg>9r[<oEh6,S##M_01)-3>/g;-/%pNqXE<P?XBem2Ml-O12]kcD^sT[RN$eD!>/U'32,V=X[,5YMD:Tak@<
%+Z]kYre^V7PPY[*X+QfM>r-<bW$U4HKf3o!_CM=X^*eY9F)8"&Wqg.DFH@hb\TE`n8lmi!4?,L^k32"Xf*b)^k2*8*q.U*V&6&2!
%-pX'2"+O$>ViRbVe*CSe%lGPF@rUfVn<2ua.1lPW1VnjN1!69l7\^(.^KN(7J4HpWg/-PcrS.qqd*SsKCn>AFO;+?i,W:*N@ru(3
%41'<X,t[d'KER85U/LeRV5ULQ0=El8ThEp'C(e,7ST!'joe9)hG^])oPVU+!2/m=FC(I1,RmeQ>*CbHB^`)_Y\E=PXLU?_M#qq"*
%F3arHm=&0qF>ri<b-`YJ]/0AFF&25QJpp%Mc96!W<Y#cFHgZ`kXMp=%Q:?cK8X6Wo[@_dt!n2@Q`Xqe-OJ((Da0fV8(Jj"e,_^-J
%7rDK_8^e>Kg5$T5VHoX"`W\r:;7][RF?D.!!;/1HKR>tO;>hb73>M4STO,ED]a[-S!`ONUI`6_UBFP/GUnL[&U?ac'fS>ZR/0.>i
%a?\Y-P1Gus'Qo$`A?<B6&hd<*!CI"Y(2;(JUnhOYigJ&o]PEb#_peaL0uWjbr;h&:H^6F[];h@VU1Ms&e=AA?4<EFNs5lH[+_5Q0
%;k)1aL0R?PX/7KC/4&%'S$$Yg'D>*,Y+r(^3I\mtePpo4JO#8Kr@kGe1H%lp*0$ck4K=`jfk-h/ErACiY#t@*g<b7Jl*9.SNhFJR
%i9@Ub_17G39FI83ogM?L<0RgM`)A1FEZYBM5uZMXU$g<)[tqK36uja93p+DE_,W!=D)\?E<20'!\bCCA94=6Kr,nOsHc%U+...>I
%*+@g\Qh<Y30[Al[RA8*M2[r6IIZY'Qa8-YsK?kl0ei-sqO'%)a5X]`E/?lj]fVFQqVaBU=<dUNT2r;d:3[[3;?[."'(O+?RW+DVm
%\sfrcn<Etgeo>j91/@R\.jYtHh&JD-,+WJ*bc'+A@_J4d^Z=)a-'i-QCCN_\&_Qa8+V"\$!dn(PXn3BaPq7RA&+[I5i/I!aEg8@4
%UVABLZ)*a;I<@R[NZq[3[nip<KPYs>HL2BrXY#4Opj*j9E8rq%ekMn?%HSMnC%u:-LT1*BFik`D4hma]5$N_3d&1aVY\eHjSc>@1
%A<@@TKUffS1SeSL0Z;@q6.>"/7Pq\dq6mfj)T)LW^:fMAaMRX+B\lmNW`gRhB*#DH\KsQ)\*Mha#>:X<Q)-5hc!=KSmCQ#e""'?<
%dV06:?^F?DZ4U&%X$)ha6_Y_/(A]299:b:?bgjD\O_a\6E&t32X`t:P6.Z2[$M7%SFM4jUD@K(USATdHO]/o5Rl,SjU)7(*`:6<q
%a`4`/d*!R89mT#*muC?24&`Y]A.TlL,7g8"4n)A8Zd/I-Q92;\l[3UL5Igli(1#O,Z!f?'"e3=A'.$!Sl0=@*J'>dVLn,fZTt?I4
%`)bo;bp,EbGsYRSeKr\r0)6$<k#p\ln.TK6>Jb/M5D/*47f4XH!F36jD?`ZT*1_(SOoil>,^hB\M'1QW=E796G/Q4`MP8)rYn*_!
%6r%1:SLBpn_lX+14fOe63^VBS@M&'K9Bt!R%'?_rWKeD`TXNJ`p8uFJm58Sudr.gU=UhXtBB&^,%hWTEGmB^+i$9GI1lD%dMiCpd
%HWh<'ci[AtL?2"UOqj*[fJn9h*7kTMmN9m(Z<Og5Uq-YR#*@VuqMe.sfGDLRq62'6=a\spFQl39LHmYokHs)=lW7B&l@KojV1kKD
%0!G#IhQM=fIO2&kUOVT6Z(lTtf'q\i+^Suu>_mr4P^j&SKm?,90F=(N]^]lkQCHp-@loT&<!=BRfopu1>+#L&)$Gf[EKio"`)guA
%.%Y/Ma>=D80V%*&dA'fI$H9>Np19#KO4#9<(4$F6%O:Ba;,q;s_W!^aGu#\RP/=NF=DNXb,sU478%c3MZAFM9kuqTJAc!IJP1qi-
%qIt\V&*E]RMh\\&p%[tIq(i'M4iCZ+o\.U8!l97uiBd1*cSFjfbtFehP!%6i22dTRDd$\>F+aeCZ2j!u>_*9ag2]hD<$//$V":d%
%6kDW7attN4#!@c<P:CuAD6XA4:fbjW1+:2hFCt0t_3m3"FS6Cnl\AkWbb'Ash7S3m?[9B#Z:TQ<DhSMt)`q%Pl<N@M6b0**W#08Q
%)/Hf"bD[Mf/=oI@Ok'g$jr$@!\S5K_':HA72B$W*%jXoN<kd?8m_1Y"%rm1A4CG,kE76d44u/S6pmI%#n!!=P**:d(62i?;QbRl=
%70(MoNuh^_Tab0oIp5fhBGfNqDi\#UB"GNP6S=/23Zhb#P"[Q(ffr=Q1IK`,4O`$]_$pA?Hh8,`Vo$OA`7=d502?,i32?F$B87Pj
%d6ai?3*3"r">U-2XIPGEN3!773`u&[&ZLFj^U_%4?fAQZ1LVgp\Z:p]GYO=4^8D,@4"XOUTpa[K'*#aV#ng?B2YK1]\%P=[-,G&7
%@c"fd?h"'mf%0IOK)O=FbaP;j*!TAW]B*=q!E]\amK(Z!dhLDjWB13@KFh66E/)T%01T$YoXqPX/3LUY5IViu?5H7f:))(%:tH5c
%"lXo77]n%$aK^XSK1D1lVfVVel`eI^oI0Bu^[?mRY*pQI#-6F2,:N9Fd1%LTFpF7$%#&#9EtkGoDuK87K%3D,rL.fR)MJ4AH4'eN
%.kS<ILu>?[k[n)<e)`^ESZ0\F.%JOj&JT/P;<l4?['NaNalrnQYQ?rX>2Abgi@"Q]9trRCpUK_\]R90q.isA$O>I9;gku\alCMNY
%(5YBk_NOZC%fltKYD+$ERY_bL@#"Ck`MJQ0pDbJoVr0'RFLSRK:1pr;4;1>DB3Kq`ZcRP<pT5j8jL)<WHd7R<@F2noA6Y?sjQ,(:
%C!]jq<`8W4W?gqsA=hL3XA#hC6RA3KXQ`rDi6PfpR'DQr3%d('GU#QL%^1qV3`?&_'k)fd;'F\lgX`q(.$ARY>@u%l>NKW]0)FMd
%I/WBsDr.Vbrr$4(.%>0_US.0a*;Z9RW5B4Gh^p#DDoN:WUKP2<[)4J^3h<kg&"*)e<%8mjd=j<>J>o%nNKjpnBmAs6L&3^m\'f4.
%5au!E)ErQ6%k@c/[UWk>\'P<E-</5-MV.]OpoPJ-b:76erOZb;/h-Eki.0L;Grf3"e>T4H_=*FIT%tBOfYdga_%_Cj)ijgT=an.q
%IW)4U46qjkVn`$T\>&Cq[=Pf$>nZC*d.]]%s4Qj2huWsMC1X&;+N@FSn)`)mAS\(S(Cb<u@?_k9B_aB'Zf[=JMQ]n$%FhTSa.>dB
%,\g,M;P`Nt.U@NunVhE1O1Wuabt<2*]'FRl)q5sVs.WltN_bl=VgnX/+9(cUJ%pE,ba[m8k5Gpu1Pj!b_+)dI_TZ^'mE3hi0D0@'
%\+E-WH1GE%"8;sIi)8Z;@Lt4>1P@D6/MW/$_4OrkJ`:-ZQO>!1W!oOo6X/-@A>I_t/91oe<.F=o'uAZqEt$AH69OBK3$YAU%$3b9
%&lG$6kC702BG;\jh#u*A/V5\-X8&spD7b?Z=p.1B5WIck6W$[9BUa[fTE_<5curoO.6qn5Me0FW;EG)b,*4[G",.jj$!boKS*+>Y
%D/[gsbjuk#9j5)K9j8^NU8VE;X05+Zm_Z:+jd&Y##R<3ICao=Y;!?,&?i_@VU3i#BJ\qWGM25@n6q8;30F3Mgib[08EKN?O&PI2#
%JIYgGZ:.p8`Lo$<HDs$3pj.r+BT@=s6<iD]C$t171Jri].WY:*hpF6fLI_CufY)!TYG8FGL2s`);6;-]BX"e*TP)2#<"O34WLCpI
%qBoM>_"9$O%&);4k!);$3L9r7)r5E:g."CIf%$WX:5@$&;@+-G`6G="j?8l,dZ=Rpe-Oib>2Z'`DZn4'XUC+llO;.!_D?YN\l!X)
%C[6V$H[B3Lhm`KNl$h_CKYU`"aMRt'#nqJnYFcW9"os&\nMIVjb'uhbAMmg]F0Y^VknhqT=R+BK04dOZq0HYKAO8W//?fcY\U,gf
%oLs@:efs#P@3UPKeeDCBHP4<nW"?7eTV7EBV9sqkQ=m!U!l\&NX`\?#>bZcVh`36GW:qa]m,"cfXbA0U)-a8s9efXA2/^tZO+lL^
%no_6E<B>j)8d$tWL2nc-V6et3Ok\=`M_-^`=mZr%mlN&h!*3*)`UYD$BHr96r[js$k>n7M/OIN%TQkcefco_2bU?Qo9Ab:34VehV
%[:,EfF'n;(THZ);lM;:E+)r*,[ueiJUR#^*6J?hB_a1e;EN=HM0CgG<!4tu%bX&kM<6RUAp"ZtQ.(r+ma;GefQ=./D&aDt:7=j'E
%/!3'ZQ)@LeAdngV1HYu@C>MTC$&5"Z7=TRuWCI=N$MqZ[U8pQ48jh=Y-4[tgr]#q"R]Pbl-G*]D"gQ"ga!4(7m7F:YQi<OS,cusJ
%'Gp>lRSbtHZ"_e%03!anD\`@r0i[n?KbNO"S(O!Q6$H7ZX\?jf>hZkoiRIYT[TJe[_FJ=lC'!cJ/B"/62Qdn8*J.pm9=_?^RMItt
%UXgFbo6'b?/nia@_+_9Lq518p4'qhHo5qUU;SQ/Ol`eejX@=2C02Zh6gMQRXA<Cm68rc3RKE\c05'Ps%jl0B>6blr'WsG;W&I>Du
%5F&C'BFP`'<TN_)i)ph](hb2&8@RsMi)+YsL_G\<kuULa;2GadSJe9m717$*YFJFhc!(Eio4m'toa2<:XI1+?!^E6@QF-d5/;t4a
%j/1Xp;L.81,i_\8XX)Tm[N(q7GZm^kSna[I33.0(i8XGR\a^Qn'MiG=bkW0I!#?,0d^8eZG)O_7aiB*gBr0Sj@B;@CB=-!a&USW+
%DOK$QBXUbR9WPtQ`)*F9rO9r=:noClK*p8F='OFf7HPJc?6)i**IY/j]I\Ik5jgY7C%.9Ad0>?.S&K-Y:*",k)S)<4NNQ[2pXH'@
%n%X3o%VJr?*F+(j$Z)k,EM+SI#=+i#Bm_1o9;Mt5lLlh3Flltgg(q07hKg4&=`1(m`Og77PLEWl5u4J02;HOnP7U5XEn;l6^6S.C
%9hY/q9P"Q"ejT>[JE;#$&u-O#LF!*ae@uE\8*`kfS]bR\p\d^H==(2*Tg>+dMR0Y.p>hi;fC'NK2h4;egfESq5mR^4l"-8(2F@co
%G#O[UnP8V1^'C4fr%9@GMOj\q(^!gid^WEofKFON#a#_N?A`t0#WON:I`s`7'KW>W=:#`Db\NnPSsJ$m42.-CgCM2]^D2Mfg3I#6
%d/=g_l&pogNIGUhaGM[_',dXa@^Ho3%QT'iRZ2C:R>"m3K"IR13J@)R@7Ttt0.mms:\e3$>d9i>]U!;_(+0d&@:uQKZ'4oEa(1t#
%:V5&#5[;d6L1kaE2_O>Ci?%XE]RSJdP?.&1"f2@1RT]u.?W/;MX%3@E]bor16QN:.5FX[)%R54Y8]/05Vh0EXXATis#m>^M%F;(T
%PpeS*D`;p4foB:h$4&i&5\"V"oW'bYVeq/B8,BRiYdk)<FH=9DYBp(HPB/"YO'H`cKg_6_>^?C8pgh&>:N>jfoV6rG\B.m6B.5fY
%dC=^j`#45+AB!G'bfKDn]MJ"bED;PZ5$=Mf2bS/\l\?Tqfu0bm)%As*i"dmf:XL'YjMNQ4RNgk>5Bu!f.fbP5.5u8Ao^sq)Bqlb9
%7q@5&FDAo8=o:b>0tWh`LS?a^Tn]l%P+AD!DGT:/84^]RaU40"5J.@u0hY%%gc[l'\mg=p(1GDQLGPMH4[:TKNOF$XBY43=h*;U+
%+!#OhK[2Q(o<u,h>'ds(*Wb\OPACWP*5UJDpma<d8?W:SPZV#C=@*lR>Ffi8D3pKW[R&PM&9unK3B"):2V`r/JHi2TNlFpKkctpT
%NVXLa<N,8<2^K#Z*bAJ@HZ>p$?Z2*?mL`_,0:_I5L!'B"YPW-j*q(M4.+4:"%6L=4bc*QE$"eKC>1bYeg:a%#I$r$(-0j:G!9F[1
%SN>^iTG3fmF8uk\B>([n>(*[DEB!b-IQ?k&V(RuGac&d>%CIq_(#t6'`qQoYn=oe](OZJmjni-X[MdLN;ut72](]udS5.Q**8(*"
%r&6jiQfh3:j?0;O#?/ao#XH;_3!pr4gF\PZrIC,ul2E-XY-l2u4Y\mBIRb7!94o%.;\QO-jsJ7XP,`B[LORrhHCYT'oNN(:M:F0c
%X"4g9RSf[mdM,F_+'0q5HVN^>i\J\;Sb"m;6C0!"Ho+LO]A!=;gf"K&<K(`EQ,bp[.n7!<aAH+e&_Cf6D2+8WdPSM6!oT^n20t9$
%L%%Gc'Om>>_Tra!pWkcaib]3[^ujKQ9c^`ZDs,T]65[UDZb(@5oJpE5jRCB\TXA,0;Pu<%TE/k\7T>C*'GCUQ3%!iD:MMNu0&UHg
%d%R10VFRlt!ZRXe]j56VYk#s8`rtWHd=M&kFe;CTiuQ\HdURlbQY6<%jgbQImGUfjH:qHb-AW/orVE$=62-S7o"-T][K`J%P1c/7
%cf\9"fdmeYQ3lhh^%YPS844NaJPmsY-:iE[8&cmFO/dGR[H=9$E[!_meSgp"?/po)du.J[@hYY`a5(!IR3;H)<>Ec>]u6A+fH2)$
%fcNqI%=oj<Y7t!^A!K1!rg[PLMN`mRg#Lp%F7[CaE?_e_ZYq..M?fsV<W@"iJhkm85BtFkfcQ&/j9qsk4n`N:\0@UUdDV9]g_,31
%s4I$8*`+7cR)./B,mr.<`;Y^Gd'P`@Iphl(rE52>aX<%jHGJktW2F0UUkE=V".)pPO-G33Ih\OA=^nX#lF\(-TJs(?$2U@<ll40m
%;)K)&"AhF3Gs+45M^IMsV+Xg?73#OIEcSA8aK6#0oGZ8YR[tYU\c17188\cJV?Z-kSY5tb^SNEmC'frJf#Z*$rB/j-]>kjqJ*m38
%r`H.Cr(sA9&Oj>,.F,Q!g9LVYVlh,`HVa=*]Dl*S87;nu("CPo0%*KtR47]r,6\G!_`UPMQ"j!5Yu>cd3XDG0Tke79"k!OPb`Q'J
%6P7&$dJ\u-09[56\k1W*CLPW=Mnhqu#a/AU?A[HU#*)g^UB.RTh!sT,l-PhY%;8>'N7R(S^65VN,`X"9k(CoR*8qRL:bStl`V<jm
%S)ut2ja&lN>WM0rPul%LKF#"o)`hE,4DM6<+<r!^FTXWa"Ta`HCV"05<KUe$BrD9V9LD%+<4lUFs,7#X@"%Hk\qhPP=660I_bsp1
%:7W0<_upX`$c?US:bu0rUS9W'U]qeRFM>*pbN@=XqdX;Ta.'P<TjuALdj!Jpja<Z3/KGG,-^c$^ZTWdI\HlfP]Y9fZ<:`XCIG;.u
%'Ci=3K\T.%/IP!$jOWL`"XPiX8?^(V;l>^+.'E6B:i#h1:CC=@)K9BAMFYAP4Qk2-TMM=)YP4*BZRp#nqeQNdS6KMW%T+oAmo5cW
%QYM::;'5pKFd;JaFCm0E!Y$$fXrLrN_[K?M0(:O6$&t_6Pa,u00;e4!ik,&m67sBDn<<o@*Mr&u&:!3i6WqJVW.q(4$40oU0t`fB
%_"Y5AJ7t/,P\CsQ1?YNEQ9)rbSZ?C'%j]q$o=CT&Zj%XK/-,r4gS,ns77oWpV"S8`lHKJ1oJsA0g"&GbrgL]aK%`ar#tJmY)M,cE
%)EPuMiAj#TV@`m50:bD,4PaH^T>C1;_IGQ.rqs9@;[74>GceZ@\;ut@6K%QPQ=RDfq05Trr=j??n1j0+I#m,2:EO5D=ZOd*YG`VF
%q-;g'$>EpHfV_.mTd4n7*??OV:d3I^P[6gdqs/sWGsj1N[:2"(Tt5#FIrK-c+Va!Zgt`p[+T\diDWFiR3Hngm\m:(&`-If@m6#uS
%T[GOug$1##K0mj48,^VrI^L<HqsWQAW6.9$>]Fn):;>V4b&&:5=jpb2D?:bXEJ:IC6@Y^;9q%Ut]d<Oj)/=?%L,B\9B9gp,aU&/4
%Xi[<mrL"GQ)(@lS0=9L;5IFiM[RT@Jjj3",V3lZ87+pif<$CBj]ip"SKlGS/k6r:cKaKeqZgd;:L/hsE%\;A/Tka<<g=A'fe&5"f
%W6]QBjg:Ps$FR9h`=c&aSC\[lRKC^2p1<[rZ*7ji:<02]/k[s7m-42%A$`f?B>8'(PT=Mr0uMu_b)Vs<R'J:;X./j&jrceDlJiG)
%LF.JblZQ,E^g59>P.TYBhi@b:Yb%/)R`Emb2tsZo'I.-sd!]G-$rc_i2R[q\Ujk!,JW&l030TcX8?1%`okt`57od:'Zb1ErA`ig<
%"Xt&:ARnqcm^c_LRc47Q0CH\*ZM3WiQ>ra,US_<K*N"I:r]1[.S&b,%KLMZLqUUJ%mr'"r$KC6S4g1IM#T0gIR(>eSHMM>"^)gk)
%^):\Qm8.X"l1Q1;3=jp(P4E`e07PSBWeTP7mRs@tCa%9e+%sj.iUsg:ia2$)2+]0%%-+@]&^NT:In:sc[@LEGZ"72F"l5Y"'jEUf
%$=dpAT4e%s;'4=Laonf.dhJGB13^q'7m>Zr-1-clfmr'=feY39.uFX8S6jlYq%7o.ZJ4EP9QXE]q(KN3+3+AacP\<"b0`fsi6k`p
%5qf-7<C>a-PDN&2?;D4ab::K1@V-#cA>6;;9OfS?SSq%2,54hS[F58hCANq<POeEN%[1r#k!OPm2+b-E9d]Mu5t?^'EEcQ%mK^Hd
%O%e%G[fI]8"N`[r?odPF/p2>!*C<'5&%>fIRH;^jW2pbZ@^PM4CpLE*!X`;!6S?bK?`HfC>.7=8L5ltW11/?^pL4e_IU9-$(P](/
%':GSCM<jiRd,QhMH(L%mcu%B^*`5qM-=)(!-N32paDY86pA>dC`5d2Ra-PU^U/$b<JWmGnc`:\"QU4'AYn)5FgP&2p<Xc/V`-iJq
%3V8=b5!iXM`lS;UO%c@KL?IeV&trbj;rm1p*?Y#4<l[O@_Rc[G/9K[OcK```#\%a).8m>!RBU6:s3SW.o5n+9M-E@@FN^),8L\r5
%&uNFi`^EDTo7TrD#SJDn(9YjFG2&LU4Hg9smU]FLGo/(\V?@KEBYiid<^BrP_&#=Q>]qF:K\<S;k:@NESjYi-J7t5VUJ0Fq."O!!
%@rVu0Pbr9);JmS(SL<k?!QP$*eZ:^tLUo=$Q'W/=RnpX1phiiR-SPH]h2km<2>1IEUU^#:ghLu4`b!rkS>HtDk;aLtW@LSdHn-$Q
%270:1;H\O@YXMJo*@8S,fh0LtjHG<"31gfAP9WnHn6krFd8=):e[>NAYS-7]:hGC%N0[iYUe[sTqJ(H]E[-Lq&=Y1AqARqZ25Td%
%'BR,s;_)t;k"'ZAq0as??d$Oh3*kmS8Nls!/VqP6pq5)(<H@0>-ID.1(d*Z*.!FB*5[3rGitSh3,$K<3)Q1ml@AeP<<m!Z/l>;:q
%N)Jl%jDJ)B@5W$c9)=Y(87Z->B;8f"2urYQCcb2aS"5!A2U]Vho._jA<oGF^Lo*qF:V]ZY8=U*j&co4/C@\aZea'1>b+oYZ:Q$KU
%1j$[+aB@n7.bCIK#dsB#ha];_A>Ina-*01TX71KqNjAftgn8@c6>e;`H\=)u?ki]?Meh`3/OjjD2pS=B>JiBq&#L1QcQ;_pI<#tP
%\*=CcYmgQWGrP*uM<fPn-G7J9e.sk0@AFj#AZGp)mjIR0T^B'*3bWmf=R7hMku-cO6ZP4Ws)hE>Fd(>_>TA'jPK96"5fs(^[ct"[
%2)=ilj!/T^@(/'@7`d_kE':3q<\tV)$V!%;8XQ@^b^$\m1#BQY-:+S>6`G3R2@Mtj,;BucL'3NsRhY#/E$ZZ6i_,V#&$/u:$=IR[
%X2oih+F-)F+<mT[RVU(o(-e@UN)kHV9=rh:BQBK40ASCd<,_:tZ4TJ=r$]hG;pB;909L(Tr2o#=aG;O0Yk/&Qg2&scBTtJ@]q;4W
%%qGOO<P\A5N8G.G1).qOT@Eudid3;oR^_c[&OJQlYJ,Ke9q.gq6G#.T1V(,XQWb57+cSIu0"af,ASr=GY7NO;VH$Vd#7DdL+abO[
%f7d*XF('8AgYeib=`GsM/R$SncZt`c$k(hZg3E4p:K?e[=&b7=rUn<g5Z3l^Cbdr'lUO_u(*'dV[mmCsb:Hi*,APqEVk(%>*lbD*
%O?s[.5qj7]L),(J)`b_d:"<Vhh(<3_%soO.&Mu*n7&7e4ZtcN(.GjY`K7]rT2OEIQ#I"$Lau7j2QT`2f>uP:Y'idG/TU6oNjS@it
%Oudau+R1@)WhZqEj`IQQbT'cS6-e2=pXBQCgJY8S3AUSLEF1@tjA*HJdbPDNhA3cLIFXn?'KH@p#K6_7k#p.`k>[5h#HsWiEd,5s
%[CLdTrKN\=rb'pPa-l#9=%cC5b!+.%BSJ2fR4M9H!S21(X_sgc0r/L99a;:"Ic&B#Er#]Ip<EP[#>Sek0)b3Z2)E3Sf[.1@/Q0%e
%5*V=YR_L:RS+Ei.atsHhO"\4R'fWan4]rJ2C+WPX4/UoMX(U_drkmPkrQTg1J,d!ms+eAdl2U\Za3UCH"2Fdf5Q1$5s8'd.rql`n
%q2`;dX5Em?VuQ_eVk8G<HhhYGs3pq=55jo15QBttrS`f%J,7VYro'J,U5Q/^If%m7rQkN62h1LM!GP$oV>~>
%AI9_PrivateDataEnd
